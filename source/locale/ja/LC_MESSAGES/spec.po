# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018, John MacFarlane
# This file is distributed under the same license as the commonmark-ja
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
msgid ""
msgstr "Project-Id-Version: commonmark-ja \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-07-21 14:59+0900\n"
"PO-Revision-Date: 2018-07-21 14:59+0900\n"
"Last-Translator: Anno Kagurazaka (AnMint) <h.work.deputy@gmail.com>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../source/spec.rst:3
msgid ""
"title: CommonMark Spec author: John MacFarlane version: 0.28 date: "
"'2017-08-01' license: '`CC-BY-SA 4.0 <http://creativecommons.org/licenses"
"/by-sa/4.0/>`__' ..."
msgstr "CommonMark仕様書 (John MacFarlane著) バージョン 0.28 '`CC-BY-SA 4.0 <http://creativecommons.org/licenses/by-sa/4.0/>`__' ライセンス"

#: ../../source/spec.rst:8
msgid "Introduction"
msgstr "はじめに"

#: ../../source/spec.rst:11
msgid "What is Markdown?"
msgstr "Markdownとは?"

#: ../../source/spec.rst:13
msgid ""
"Markdown is a plain text format for writing structured documents, based "
"on conventions for indicating formatting in email and usenet posts. It "
"was developed by John Gruber (with help from Aaron Swartz) and released "
"in 2004 in the form of a `syntax description "
"<http://daringfireball.net/projects/markdown/syntax>`__ and a Perl script"
" (``Markdown.pl``) for converting Markdown to HTML. In the next decade, "
"dozens of implementations were developed in many languages. Some extended"
" the original Markdown syntax with conventions for footnotes, tables, and"
" other document elements. Some allowed Markdown documents to be rendered "
"in formats other than HTML. Websites like Reddit, StackOverflow, and "
"GitHub had millions of people using Markdown. And Markdown started to be "
"used beyond the web, to author books, articles, slide shows, letters, and"
" lecture notes."
msgstr "Markdownは構造的な文書を記述するためのプレーンテキストフォーマットで、eメールやusenetの投稿のフォーマット方式をベースにしています。John Gruber (とAaron Swartzの助け)によって開発され、2004年に `syntax description <http://daringfireball.net/projects/markdown/syntax>`__ と、MarkdownをHTMLに変換するPerlスクリプト(``Markdown.pl``)という形で発表されました。その後の10年間で、数多くの実装が多くの言語で開発されました。あるものは、オリジナルのMarkdownを脚注や表、そのほかの文書構造で拡張しました。またあるものは、HTML以外のフォーマットにMarkdown文書を表示させました。Reddit、StackOverflow、Githubのようなウェブサイトでは、何百万のユーザがMarkdownを使用しています。そしてMarkdownはWebを飛び越え、本や論文、スライドショー、レター、手順書を執筆するのに使われるようになりました。"

#: ../../source/spec.rst:27
msgid ""
"What distinguishes Markdown from many other lightweight markup syntaxes, "
"which are often easier to write, is its readability. As Gruber writes:"
msgstr "Markdownとその他の、より書きやすい、軽量マークアップ言語を峻別しているもの、それは可読性です。Gruberによれば、"

#: ../../source/spec.rst:30
msgid ""
"The overriding design goal for Markdown's formatting syntax is to make it"
" as readable as possible. The idea is that a Markdown-formatted document "
"should be publishable as-is, as plain text, without looking like it's "
"been marked up with tags or formatting instructions. "
"(http://daringfireball.net/projects/markdown/)"
msgstr "Markdownの文法で何よりも優先するデザイン目標は、できる限り読みやすく作ることです。この考えはMarkdownで書かれた文書はそのまま、つまりプレーンテキストのまま、タグやformatting instructionでマークアップすることなく公開できるようになるべきというものです。(http://daringfireball.net/projects/markdown/)"

#: ../../source/spec.rst:37
msgid ""
"The point can be illustrated by comparing a sample of `AsciiDoc "
"<http://www.methods.co.nz/asciidoc/>`__ with an equivalent sample of "
"Markdown. Here is a sample of AsciiDoc from the AsciiDoc manual:"
msgstr "この点はMarkdownと `AsciiDoc <http://www.methods.co.nz/asciidoc/>`__ のサンプルを比較すると表れてきます。これがAsciidocのマニュアルから引用したサンプルです。"

#: ../../source/spec.rst:71
msgid "And here is the equivalent in Markdown:"
msgstr "そしてこれがMarkdownでの同一の文書です。"

#: ../../source/spec.rst:97
msgid ""
"The AsciiDoc version is, arguably, easier to write. You don't need to "
"worry about indentation. But the Markdown version is much easier to read."
" The nesting of list items is apparent to the eye in the source, not just"
" in the processed document."
msgstr "Asciidoc版は、間違いなく書きやすい方でしょう。インデントについて心配する必要もありません。しかし、Markdown版の方が読みやすいです。リスト項目のネストは出力された文書の中だけでなく、ソースからも明らかです。"

#: ../../source/spec.rst:103
msgid "Why is a spec needed?"
msgstr "なぜ仕様が必要?"

#: ../../source/spec.rst:105
msgid ""
"John Gruber's `canonical description of Markdown's syntax "
"<http://daringfireball.net/projects/markdown/syntax>`__ does not specify "
"the syntax unambiguously. Here are some examples of questions it does not"
" answer:"
msgstr "John Gruberの `canonical description of Markdown's syntax <http://daringfireball.net/projects/markdown/syntax>`__ では、文法を厳密に規定していませんでした。下にはそういった答えのない疑問を示しています。"

#: ../../source/spec.rst:110
msgid ""
"How much indentation is needed for a sublist? The spec says that "
"continuation paragraphs need to be indented four spaces, but is not fully"
" explicit about sublists. It is natural to think that they, too, must be "
"indented four spaces, but ``Markdown.pl`` does not require that. This is "
"hardly a \"corner case,\" and divergences between implementations on this"
" issue often lead to surprises for users in real documents. (See `this "
"comment by John Gruber "
"<http://article.gmane.org/gmane.text.markdown.general/1997>`__.)"
msgstr "サブリストにはどれくらいのインデントが必要か?仕様では続きの文章はスペース4つのインデントが必要とされているが、サブリストについては明示されていません。これについてもスペース4つだと考えるのは妥当でしょうが、 ``Markdown.pl`` はそう要求していません。これは「コーナーケース」ではなく、実際の文書でユーザーを驚かすようなこの問題について、実装間で違いがあります。(`John Gruberからのコメント <http://article.gmane.org/gmane.text.markdown.general/1997>`__を参照)"

#: ../../source/spec.rst:119
msgid ""
"Is a blank line needed before a block quote or heading? Most "
"implementations do not require the blank line. However, this can lead to "
"unexpected results in hard-wrapped text, and also to ambiguities in "
"parsing (note that some implementations put the heading inside the "
"blockquote, while others do not). (John Gruber has also spoken `in favor "
"of requiring the blank lines "
"<http://article.gmane.org/gmane.text.markdown.general/2146>`__.)"
msgstr "ブロッククォートや見出しの前に空白行が必要か?ほとんどの実装では空白行を必要としてはいません。しかし、これはhard-wrappedテキストで予想外の結果を招くことがあり、パースのときに曖昧さを誘発します (ブロッククォートの中に見出しをつける実装もありますが、ほかの実装ではそうではありません)。(John Gruberも `空白行を必須とすることに賛成しています <http://article.gmane.org/gmane.text.markdown.general/2146>`__ 。)"

#: ../../source/spec.rst:127
msgid ""
"Is a blank line needed before an indented code block? (``Markdown.pl`` "
"requires it, but this is not mentioned in the documentation, and some "
"implementations do not require it.)"
msgstr "インデントされたコードブロックの前に空白行が必要か?( ``Markdown.pl`` では必要としていますが、ドキュメントでは言及されていませんし、必要としていない実装もあります。)"

#: ../../source/spec.rst:136
msgid ""
"What is the exact rule for determining when list items get wrapped in "
"``<p>`` tags? Can a list be partially \"loose\" and partially \"tight\"? "
"What should we do with a list like this?"
msgstr "リストの項目が、いつ ``<p>`` タグで囲まれるか判断する厳密なルールは何か?部分的に「ルーズ」で、部分的に「タイト」なリストはできるのでしょうか?そのようなリストについてどうすべきなのでしょうか?"

#: ../../source/spec.rst:147
msgid "Or this?"
msgstr "あるいはこれは?"

#: ../../source/spec.rst:157
msgid ""
"(There are some relevant comments by John Gruber `here "
"<http://article.gmane.org/gmane.text.markdown.general/2554>`__.)"
msgstr "(John Gruberによる関連したコメントが `こちらに <http://article.gmane.org/gmane.text.markdown.general/2554>`__ あります。)"

#: ../../source/spec.rst:160
msgid "Can list markers be indented? Can ordered list markers be right-aligned?"
msgstr "リストマーカーはインデントできる?順序リストのマーカーは右揃えできる?"

#: ../../source/spec.rst:169
msgid ""
"Is this one list with a thematic break in its second item, or two lists "
"separated by a thematic break?"
msgstr "下のリストは、2つめの項目に水平線をもつ1つのリスト? それとも水平線で分割された2つのリスト?"

#: ../../source/spec.rst:178
msgid ""
"When list markers change from numbers to bullets, do we have two lists or"
" one? (The Markdown syntax description suggests two, but the perl scripts"
" and many other implementations produce one.)"
msgstr "リストマーカーが番号から箇条書きに変わるとき、これは1つのリスト? それとも2つのリスト?(Markdownの文法規約では2つであるとしていますが、perlスクリプトやその他の多くの実装では一つのリストを出力します。)"

#: ../../source/spec.rst:189
msgid ""
"What are the precedence rules for the markers of inline structure? For "
"example, is the following a valid link, or does the code span take "
"precedence ?"
msgstr "インライン構造のマーカーについての優先順位は?例えば、下の例は正しいリンクか、あるいはコードブロックのどちらが優先されますか?"

#: ../../source/spec.rst:197
msgid ""
"What are the precedence rules for markers of emphasis and strong "
"emphasis? For example, how should the following be parsed?"
msgstr "太字と斜体の優先順位は?例えば、下の例はどのようにパースされるべきですか?"

#: ../../source/spec.rst:204
msgid ""
"What are the precedence rules between block-level and inline-level "
"structure? For example, how should the following be parsed?"
msgstr "ブロックレベルとインラインレベルの構造の間の優先順位は?例えば、下の例はどのようにパースされるべきですか?"

#: ../../source/spec.rst:212
msgid ""
"Can list items include section headings? (``Markdown.pl`` does not allow "
"this, but does allow blockquotes to include headings.)"
msgstr "リストの項目は見出しを入れられるか?( ``Markdown.pl`` は許容していませんが、ブロッククォートは見出しをつけられます。)"

#: ../../source/spec.rst:219
msgid "Can list items be empty?"
msgstr "リストの項目を空にできるか?"

#: ../../source/spec.rst:227
msgid "Can link references be defined inside block quotes or list items?"
msgstr "参照リンクはリストの項目か、ブロッククォートの中で定義できるか?"

#: ../../source/spec.rst:235
msgid ""
"If there are multiple definitions for the same reference, which takes "
"precedence?"
msgstr "同じ参照に複数の定義があったとき、どのような優先順位を取ればいいか?"

#: ../../source/spec.rst:245
msgid ""
"In the absence of a spec, early implementers consulted ``Markdown.pl`` to"
" resolve these ambiguities. But ``Markdown.pl`` was quite buggy, and gave"
" manifestly bad results in many cases, so it was not a satisfactory "
"replacement for a spec."
msgstr "仕様に書かれていないところは、初期の実装は ``Markdown.pl`` を参考にしてこれらの曖昧さを解決していきました。しかし、 ``Markdown.pl`` はかなりバグまみれで、多くの場合明らかに悪い結果を出したので、仕様の代替として満足するところまではいきませんでした。"

#: ../../source/spec.rst:250
msgid ""
"Because there is no unambiguous spec, implementations have diverged "
"considerably. As a result, users are often surprised to find that a "
"document that renders one way on one system (say, a github wiki) renders "
"differently on another (say, converting to docbook using pandoc). To make"
" matters worse, because nothing in Markdown counts as a \"syntax error,\""
" the divergence often isn't discovered right away."
msgstr "曖昧さのない仕様というものがないため、実装はかなり分岐してしまいました。結果として、ユーザーはあるシステムである形式の出力をしたり (github wikiとか)、それとは異なり他のに出力したり(pandocでdocbook形式に変換したり)する文書を見つけるのにしばしば驚いています。さらに悪いことに、Markdownには「シンタックスエラー」として何も検知しないので、こういった実装のばらつきはすぐには見つかりません。"

#: ../../source/spec.rst:258
msgid "About this document"
msgstr "この文書について"

#: ../../source/spec.rst:260
msgid ""
"This document attempts to specify Markdown syntax unambiguously. It "
"contains many examples with side-by-side Markdown and HTML. These are "
"intended to double as conformance tests. An accompanying script "
"``spec_tests.py`` can be used to run the tests against any Markdown "
"program:"
msgstr "この文書ではMarkdownの文法を明確にすることを企図しています。Markdownと並んでHTMLの例を多く収載しました。これらは、適合性テストも兼ねています。付属の ``spec_tests.py`` というスクリプトで、Markdownプログラムに対するテストを実行できます。"

#: ../../source/spec.rst:270
msgid ""
"Since this document describes how Markdown is to be parsed into an "
"abstract syntax tree, it would have made sense to use an abstract "
"representation of the syntax tree instead of HTML. But HTML is capable of"
" representing the structural distinctions we need to make, and the choice"
" of HTML for the tests makes it possible to run the tests against an "
"implementation without writing an abstract syntax tree renderer."
msgstr "この文書は、Markdownをどのように抽象構文木にパースするかについて書いているため、HTMLの代わりに構文木の抽象表現を用いる方が理解しやすかったでしょう。しかしHTMLは、私たちが作りたい構造上の差異を表現する能力がありますし、テスト対象にHTMLを選択することで、抽象構文木のランダラーを書くことなく、実際の実装についてテストできるようになります。"

#: ../../source/spec.rst:277
msgid ""
"This document is generated from a text file, ``spec.txt``, written in "
"Markdown with a small extension for the side-by-side tests. The script "
"``tools/makespec.py`` can be used to convert ``spec.txt`` into HTML or "
"CommonMark (which can then be converted into other formats)."
msgstr "この文書は ``spec.txt`` というテキストファイルから生成されていて、side-by-sideテストのための小規模な拡張を含んだMarkdownで書かれています。``tools/makespec.py`` というスクリプトで、 ``spec.txt`` をHTMLやCommonnMark(そしてそこからさらにほかのフォーマット)に変換できます。"

#: ../../source/spec.rst:282
msgid "In the examples, the ``→`` character is used to represent tabs."
msgstr "例の中では、 ``→`` はタブを示しています。"

#: ../../source/spec.rst:285
msgid "Preliminaries"
msgstr "準備"

#: ../../source/spec.rst:288
msgid "Characters and lines"
msgstr "文字と行"

#: ../../source/spec.rst:290
msgid "Any sequence of [characters] is a valid CommonMark document."
msgstr "[文字]が連続したものは正常なCommonMark文書です。"

#: ../../source/spec.rst:292
msgid ""
"A `character <@>`__ is a Unicode code point. Although some code points "
"(for example, combining accents) do not correspond to characters in an "
"intuitive sense, all code points count as characters for purposes of this"
" spec."
msgstr "`文字 <@>`__ はUnicodeのコードポイントです。あるコードポイントは(例えば複合アクセント)直感的には文字に対応しないのですが、この仕様ではすべてのコードポイントを文字としてカウントします。"

#: ../../source/spec.rst:297
msgid ""
"This spec does not specify an encoding; it thinks of lines as composed of"
" [characters] rather than bytes. A conforming parser may be limited to a "
"certain encoding."
msgstr "この仕様ではエンコード形式を指定しません。バイト列というよりは[文字]の構成物として行を評価します。合致するパーサは、特定のエンコードに制限するかもしれません。"

#: ../../source/spec.rst:301
msgid ""
"A `line <@>`__ is a sequence of zero or more [characters] other than "
"newline (``U+000A``) or carriage return (``U+000D``), followed by a [line"
" ending] or by the end of file."
msgstr "`行 <@>`__ はラインフィード(``U+000A``)とキャリッジリターン(``U+000D``)以外の0個以上の[文字]の連なりで、最後に[行終端]かファイルの終端が続きます。"

#: ../../source/spec.rst:305
msgid ""
"A `line ending <@>`__ is a newline (``U+000A``), a carriage return "
"(``U+000D``) not followed by a newline, or a carriage return and a "
"following newline."
msgstr "`行終端 <@>`__ はラインフィード(``U+000A``)と、ラインフィードが後ろにないキャリッジリターン(``U+000D``)、あるいはキャリッジリターンとラインフィード(CR+LF)のことです。"

#: ../../source/spec.rst:309
msgid ""
"A line containing no characters, or a line containing only spaces "
"(``U+0020``) or tabs (``U+0009``), is called a `blank line <@>`__."
msgstr "行に文字が無いか、スペース(``U+0020``)かタブ(``U+0009``)しかない場合、`空行 <@>`__と呼びます。"

#: ../../source/spec.rst:312
msgid "The following definitions of character classes will be used in this spec:"
msgstr "仕様では、次の文字種についての定義が使われます。"

#: ../../source/spec.rst:315
msgid ""
"A `whitespace character <@>`__ is a space (``U+0020``), tab (``U+0009``),"
" newline (``U+000A``), line tabulation (``U+000B``), form feed "
"(``U+000C``), or carriage return (``U+000D``)."
msgstr "`ホワイトスペース文字 <@>`__ とは、スペース(``U+0020``)、タブ(``U+0009``)、ラインフィード(``U+000A``)、垂直タブ(``U+000B``)、フォームフィード(``U+000C``)、キャリッジリターン(``U+000D``)のことを指します。"

#: ../../source/spec.rst:319
msgid "`Whitespace <@>`__ is a sequence of one or more [whitespace characters]."
msgstr "`ホワイトスペース <@>`__ は、[ホワイトスペース文字]の1つ以上の連続です。"

#: ../../source/spec.rst:321
msgid ""
"A `Unicode whitespace character <@>`__ is any code point in the Unicode "
"``Zs`` general category, or a tab (``U+0009``), carriage return "
"(``U+000D``), newline (``U+000A``), or form feed (``U+000C``)."
msgstr "`Unicodeホワイトスペース文字 <@>`__ とは、Unicodeの ``Zs`` 一般カテゴリにあるコードポイントか、タブ(``U+0009``)、キャリッジリターン(``U+000D``)、ラインフィード(``U+000A``)、フォームフィード(``U+000C``)のことです。"

#: ../../source/spec.rst:325
msgid ""
"`Unicode whitespace <@>`__ is a sequence of one or more [Unicode "
"whitespace characters]."
msgstr "`Unicodeホワイトスペース <@>`__ とは、[Unicodeホワイトスペース文字]の1つ以上の連続です。"

#: ../../source/spec.rst:328
msgid "A `space <@>`__ is ``U+0020``."
msgstr "`スペース <@>`__ は、 ``U+0020`` のことです。"

#: ../../source/spec.rst:330
msgid ""
"A `non-whitespace character <@>`__ is any character that is not a "
"[whitespace character]."
msgstr "`非ホワイトスペース文字 <@>`__ とは、[ホワイトスペース文字]ではない文字のことです。"

#: ../../source/spec.rst:333
msgid ""
"An `ASCII punctuation character <@>`__ is ``!``, ``\"``, ``#``, ``$``, "
"``%``, ``&``, ``'``, ``(``, ``)``, ``*``, ``+``, ``,``, ``-``, ``.``, "
"``/``, ``:``, ``;``, ``<``, ``=``, ``>``, ``?``, ``@``, ``[``, ``\\``, "
"``]``, ``^``, ``_``, :literal:`\\``, ``{``, ``|``, ``}``, or ``~``."
msgstr "`ASCII約物文字 <@>`__ とは、 ``!``, ``\"``, ``#``, ``$``, ``%``, ``&``, ``'``, ``(``, ``)``, ``*``, ``+``, ``,``, ``-``, ``.``, ``/``, ``:``, ``;``, ``<``, ``=``, ``>``, ``?``, ``@``, ``[``, ``\\``, ``]``, ``^``, ``_``, :literal:`\\``, ``{``, ``|``, ``}``, ``~`` のことです。"

#: ../../source/spec.rst:338
msgid ""
"A `punctuation character <@>`__ is an [ASCII punctuation character] or "
"anything in the general Unicode categories ``Pc``, ``Pd``, ``Pe``, "
"``Pf``, ``Pi``, ``Po``, or ``Ps``."
msgstr "`約物文字 <@>`__ とは、[ASCII約物文字]と、Unicode一般カテゴリの ``Pc``, ``Pd``, ``Pe``, ``Pf``, ``Pi``, ``Po``, ``Ps`` に属するものです。"

#: ../../source/spec.rst:343
msgid "Tabs"
msgstr "タブ"

#: ../../source/spec.rst:345
msgid ""
"Tabs in lines are not expanded to [spaces]. However, in contexts where "
"whitespace helps to define block structure, tabs behave as if they were "
"replaced by spaces with a tab stop of 4 characters."
msgstr "行中のタブは[スペース]には展開されません。しかし、ホワイトスペースがブロック構造を定義するようなところでは、タブは4文字分のタブ位置をスペースで置換するように振舞います。"

#: ../../source/spec.rst:349
msgid ""
"Thus, for example, a tab can be used instead of four spaces in an "
"indented code block. (Note, however, that internal tabs are passed "
"through as literal tabs, not expanded to spaces.)"
msgstr "したがって、例えばあるタブを、インデントされたコードブロック中ではスペース4文字の代わりに使えます。(注意: しかし文中のタブはそのままタブとして扱われ、スペースには展開されません。)"

#: ../../source/spec.rst:376
msgid ""
"In the following example, a continuation paragraph of a list item is "
"indented with a tab; this has exactly the same effect as indentation with"
" four spaces would:"
msgstr "次の例では、リスト項目の続きの段落がタブでインデントされています。\n"
"このときタブは、4つのスペースでインデントされたときと全く同じ働きをします。"

#: ../../source/spec.rst:407
msgid ""
"Normally the ``>`` that begins a block quote may be followed optionally "
"by a space, which is not considered part of the content. In the following"
" case ``>`` is followed by a tab, which is treated as if it were expanded"
" into three spaces. Since one of these spaces is considered part of the "
"delimiter, ``foo`` is considered to be indented six spaces inside the "
"block quote context, so we get an indented code block starting with two "
"spaces."
msgstr "通常、 ``>`` というブロッククォートの始点は、スペースを後につけられ、これは文章の一部とはみなされません。``>`` の後にタブが続く場合は、タブが3つのスペースで置換されたように処理されます。これらのスペースのうち1つは、区切り文字の一部とみなされるため、``foo`` はブロッククォートの中で6つのスペースでインデントされていると考えられます。\n"
"そのため、2つのスペースで始まるインデントされたコードブロックとなるのです。"

#: ../../source/spec.rst:475
msgid "Insecure characters"
msgstr "不正な文字"

#: ../../source/spec.rst:477
msgid ""
"For security reasons, the Unicode character ``U+0000`` must be replaced "
"with the REPLACEMENT CHARACTER (``U+FFFD``)."
msgstr "セキュリティ上の理由から、Unicode文字の ``U+0000`` は置換文字(``U+FFFD``)に置換されなければなりません。"

#: ../../source/spec.rst:481
msgid "Blocks and inlines"
msgstr "ブロックとインライン"

#: ../../source/spec.rst:483
msgid ""
"We can think of a document as a sequence of `blocks <@>`__---structural "
"elements like paragraphs, block quotations, lists, headings, rules, and "
"code blocks. Some blocks (like block quotes and list items) contain other"
" blocks; others (like headings and paragraphs) contain `inline <@>`__ "
"content---text, links, emphasized text, images, code spans, and so on."
msgstr "ドキュメントは `ブロック <@>`__ の連続と考えることができます—段落や引用、リスト、見出し、rules、コードブロックといったものです。いくつかの(ブロッククォートやリスト項目など)ブロックは他のブロックを内包しています。\n"
"その他の(見出しや段落)ブロックは `インライン <@>`__ コンテンツを含んでいます—テキスト、リンク、強調されたテキスト、画像、コードスパンなどです。"

#: ../../source/spec.rst:491
msgid "Precedence"
msgstr "順位"

#: ../../source/spec.rst:493
msgid ""
"Indicators of block structure always take precedence over indicators of "
"inline structure. So, for example, the following is a list with two "
"items, not a list with one item containing a code span:"
msgstr "ブロック構造のインジケータ―は、インライン構造のインジケーターより常に優先します。つまり、例として次のリストは2つの項目を持ち、コードスパンを含んだ一つの項目を持つリストではありません。"

#: ../../source/spec.rst:507
msgid ""
"This means that parsing can proceed in two steps: first, the block "
"structure of the document can be discerned; second, text lines inside "
"paragraphs, headings, and other block constructs can be parsed for inline"
" structure. The second step requires information about link reference "
"definitions that will be available only at the end of the first step. "
"Note that the first step requires processing lines in sequence, but the "
"second can be parallelized, since the inline parsing of one block element"
" does not affect the inline parsing of any other."
msgstr "これはパースが2つのステップで行われていることを意味します。\n"
"最初は文書中のブロック構造を識別し、次に段落や見出し、その他のブロック構造中の行をインライン構造にパースします。2番目のステップでは、最初のステップの終わりでのみ利用可能になる、リンクの参照定義についての情報が必要になります。気をつけておきたいのは、最初のステップでは行をシーケンシャルに処理する必要があるのに対し、2番目のステップでは、並列化できることです。\n"
"これは、あるブロック中のインラインパースは、その他のインラインパースに影響を及ぼさないためです。"

#: ../../source/spec.rst:517
msgid "Container blocks and leaf blocks"
msgstr "コンテナブロックと葉ブロック"

#: ../../source/spec.rst:519
msgid ""
"We can divide blocks into two types: `container block <@>`__\\ s, which "
"can contain other blocks, and `leaf block <@>`__\\ s, which cannot."
msgstr "ブロックは2種類に分類されます。\n"
" `コンテナブロック <@>`__\\ は他のブロックを包含することができますが、`葉ブロック <@>`__\\ ではできません。"

#: ../../source/spec.rst:523
msgid "Leaf blocks"
msgstr "葉ブロック"

#: ../../source/spec.rst:525
msgid ""
"This section describes the different kinds of leaf block that make up a "
"Markdown document."
msgstr "この章ではMarkdown文書を形作る異なる種類の葉ブロックについて示します。"

#: ../../source/spec.rst:529
msgid "Thematic breaks"
msgstr "区切り線"

#: ../../source/spec.rst:531
msgid ""
"A line consisting of 0-3 spaces of indentation, followed by a sequence of"
" three or more matching ``-``, ``_``, or ``*`` characters, each followed "
"optionally by any number of spaces or tabs, forms a `thematic break "
"<@>`__."
msgstr "0-3個のスペースでできたインデントに、3つ以上の ``-`` 、``_`` または ``*`` の文字の連続があると、その間にどれだけスペースやタブが入っていても、`区切り線 <@>`__ を形成します。"

#: ../../source/spec.rst:546
msgid "Wrong characters:"
msgstr "間違った文字の場合はこうなります。"

#: ../../source/spec.rst:560
msgid "Not enough characters:"
msgstr "文字数が足りない場合は、"

#: ../../source/spec.rst:572
msgid "One to three spaces indent are allowed:"
msgstr "1から3個のスペースによるインデントは許容されます。"

#: ../../source/spec.rst:584
msgid "Four spaces is too many:"
msgstr "スペース4つは多すぎます。"

#: ../../source/spec.rst:601
msgid "More than three characters may be used:"
msgstr "3文字以上の文字数でも使えます。"

#: ../../source/spec.rst:609
msgid "Spaces are allowed between the characters:"
msgstr "スペースは文字の間に入っていてもいいです。"

#: ../../source/spec.rst:629
msgid "Spaces are allowed at the end:"
msgstr "行末のスペースも許容されます。"

#: ../../source/spec.rst:637
msgid "However, no other characters may occur in the line:"
msgstr "しかし、行中に他の文字を入れてはいけません。"

#: ../../source/spec.rst:651
msgid ""
"It is required that all of the [non-whitespace characters] be the same. "
"So, this is not a thematic break:"
msgstr "全ての[非ホワイトスペース文字]は同じでなければなりません。したがって、次の例は区切り線にはなりません。"

#: ../../source/spec.rst:660
msgid "Thematic breaks do not need blank lines before or after:"
msgstr "区切り線の前後には空行は要りません。"

#: ../../source/spec.rst:676
msgid "Thematic breaks can interrupt a paragraph:"
msgstr "区切り線は段落を分割します。"

#: ../../source/spec.rst:688
msgid ""
"If a line of dashes that meets the above conditions for being a thematic "
"break could also be interpreted as the underline of a [setext heading], "
"the interpretation as a [setext heading] takes precedence. Thus, for "
"example, this is a setext heading, not a paragraph followed by a thematic"
" break:"
msgstr "ダッシュの行が、[setext型見出し]のように解釈できるような場合は、[setext型見出し]として解釈されます。したがって、下の例はsetext型見出しとなり、区切り線がある単なる段落ではなくなるのです。"

#: ../../source/spec.rst:703
msgid ""
"When both a thematic break and a list item are possible interpretations "
"of a line, the thematic break takes precedence:"
msgstr "区切り線とリスト項目のどちらにも解釈できる場合は、区切り線が優先されます。"

#: ../../source/spec.rst:720
msgid "If you want a thematic break in a list item, use a different bullet:"
msgstr "リスト項目に区切り線を入れたい場合は、違う種類の行頭文字を使います。"

#: ../../source/spec.rst:735
msgid "ATX headings"
msgstr "ATX型見出し"

#: ../../source/spec.rst:737
msgid ""
"An `ATX heading <@>`__ consists of a string of characters, parsed as "
"inline content, between an opening sequence of 1--6 unescaped ``#`` "
"characters and an optional closing sequence of any number of unescaped "
"``#`` characters. The opening sequence of ``#`` characters must be "
"followed by a [space] or by the end of line. The optional closing "
"sequence of ``#``\\ s must be preceded by a [space] and may be followed "
"by spaces only. The opening ``#`` character may be indented 0-3 spaces. "
"The raw contents of the heading are stripped of leading and trailing "
"spaces before being parsed as inline content. The heading level is equal "
"to the number of ``#`` characters in the opening sequence."
msgstr "`ATX型見出し <@>`__ とは、エスケープされていない1-6個の ``#`` と自由に何個でも付け加えられる ``#`` にはさまれた文字列のことで、インラインコンテンツとしてパースされます。開始文字列の ``#`` の後には[スペース]か行の終わりが続かなければなりません。\n"
"オプションでつけられる末尾の ``#`` は、必ず[スペース]の後から始まる必要があります。開始文字列の ``#`` は、0-3個のスペースでインデントしても構いません。行の初めと最後にあるスペースは、インラインコンテンツとしてパースする前に取り除かれます。見出しレベルは、開始文字列の ``#`` の数に等しいです。"

#: ../../source/spec.rst:748
msgid "Simple headings:"
msgstr "シンプルな見出しを下に示します。"

#: ../../source/spec.rst:766
msgid "More than six ``#`` characters is not a heading:"
msgstr "6つを超える ``#`` は見出しとはされません。"

#: ../../source/spec.rst:774
msgid ""
"At least one space is required between the ``#`` characters and the "
"heading's contents, unless the heading is empty. Note that many "
"implementations currently do not require the space. However, the space "
"was required by the `original ATX implementation "
"<http://www.aaronsw.com/2002/atx/atx.py>`__, and it helps prevent things "
"like the following from being parsed as headings:"
msgstr "``#`` と見出しの内容の間には最低でも1つ以上のスペースを入れるか、見出しが空である必要があります。多くの実装はスペースを必須とはしていないことに留意してください。ただし、スペースは`元々のATX実装 <http://www.aaronsw.com/2002/atx/atx.py>`__では必須であり、下の例のようなものを見出しとしてしまうことを防ぎます。"

#: ../../source/spec.rst:790
msgid "This is not a heading, because the first ``#`` is escaped:"
msgstr "下の例は ``#`` がエスケープされているので、見出しにはなりません。"

#: ../../source/spec.rst:798
msgid "Contents are parsed as inlines:"
msgstr "見出しの内容はインラインとしてパースされます。"

#: ../../source/spec.rst:806
msgid "Leading and trailing blanks are ignored in parsing inline content:"
msgstr "インラインコンテンツをパースするときには前後の空白は無視されます。"

#: ../../source/spec.rst:814
msgid "One to three spaces indentation are allowed:"
msgstr "1から3個のスペースによるインデントは許容されます。"

#: ../../source/spec.rst:826
msgid "Four spaces are too much:"
msgstr "スペース4つは多すぎます。"

#: ../../source/spec.rst:843
msgid "A closing sequence of ``#`` characters is optional:"
msgstr "``#`` を見出しの終わりに自由につけられます。"

#: ../../source/spec.rst:853
msgid "It need not be the same length as the opening sequence:"
msgstr "開始文字列と同じ文字数でなければいけないわけではありません。"

#: ../../source/spec.rst:863
msgid "Spaces are allowed after the closing sequence:"
msgstr "終わりの ``#`` の後にスペースを入れても構いません。\n"

#: ../../source/spec.rst:871
msgid ""
"A sequence of ``#`` characters with anything but [spaces] following it is"
" not a closing sequence, but counts as part of the contents of the "
"heading:"
msgstr "終わりの ``#`` の後に[スペース]以外の文字が来ると、そこまですべて見出しの内容として扱われます。"

#: ../../source/spec.rst:881
msgid "The closing sequence must be preceded by a space:"
msgstr "終わりの ``#`` の前にはスペースがなければなりません。"

#: ../../source/spec.rst:889
msgid ""
"Backslash-escaped ``#`` characters do not count as part of the closing "
"sequence:"
msgstr "バックスラッシュでエスケープされた ``#`` は終わりの ``#`` とは扱われません。"

#: ../../source/spec.rst:902
msgid ""
"ATX headings need not be separated from surrounding content by blank "
"lines, and they can interrupt paragraphs:"
msgstr "ATX型見出しは前後を空行で囲う必要はなく、段落を分割します。"

#: ../../source/spec.rst:925
msgid "ATX headings can be empty:"
msgstr "ATX型見出しは内容がなくてもいいです。"

#: ../../source/spec.rst:938
msgid "Setext headings"
msgstr "Setext型見出し"

#: ../../source/spec.rst:940
msgid ""
"A `setext heading <@>`__ consists of one or more lines of text, each "
"containing at least one [non-whitespace character], with no more than 3 "
"spaces indentation, followed by a [setext heading underline]. The lines "
"of text must be such that, were they not followed by the setext heading "
"underline, they would be interpreted as a paragraph: they cannot be "
"interpretable as a [code fence], [ATX heading][ATX headings], [block "
"quote][block quotes], [thematic break][thematic breaks], [list item][list"
" items], or [HTML block][HTML blocks]."
msgstr "`setext型見出し <@>`__ とは、1文字以上の[非ホワイトスペース文字]をそれぞれ含み、スペース3つ以下でインデントされている1行以上のテキストと、その後の行に[setext見出し線]が続くものを指します。テキストの行は、後にsetext見出し線がないときには、それらは単に段落とみなされるようなものでなくては行けません。\n"
"すなわち、[コードフェンス]や[ATX型見出し][ATX型見出し]、[ブロッククォート][ブロッククォート]、[区切り線][区切り線]、[リスト項目][リスト項目]、[HTMLブロック][HTMLブロック]となるようなものは使えません。"

#: ../../source/spec.rst:949
msgid ""
"A `setext heading underline <@>`__ is a sequence of ``=`` characters or a"
" sequence of ``-`` characters, with no more than 3 spaces indentation and"
" any number of trailing spaces. If a line containing a single ``-`` can "
"be interpreted as an empty [list items], it should be interpreted this "
"way and not as a [setext heading underline]."
msgstr "`setext見出し線 <@>`__ とは、 ``=`` か ``-`` が連続する文字列に、スペース3つ以下のインデントと後続の0字以上のスペースからなります。ただ一つの ``-`` を含む行が、空の[リスト項目]と解釈されるような場合は、[setext見出し線]とは解釈されません。"

#: ../../source/spec.rst:955
msgid ""
"The heading is a level 1 heading if ``=`` characters are used in the "
"[setext heading underline], and a level 2 heading if ``-`` characters are"
" used. The contents of the heading are the result of parsing the "
"preceding lines of text as CommonMark inline content."
msgstr "``=`` を[setext見出し線]に使用しているときは、見出しのレベルは1となり、``-`` を使用しているときはレベル2の見出しとなります。見出しの内容は、CommonMarkインラインコンテンツとして、見出し線の前の行をパースした結果が使われます。"

#: ../../source/spec.rst:960
msgid ""
"In general, a setext heading need not be preceded or followed by a blank "
"line. However, it cannot interrupt a paragraph, so when a setext heading "
"comes after a paragraph, a blank line is needed between them."
msgstr "一般的に、setext型見出しはその前にも後にも空行を必要とはしていません。しかしながら、この見出しは段落を分割しないので、setext見出しが段落の後に来る場合は、それらとの間に空行が必要となります。"

#: ../../source/spec.rst:964
msgid "Simple examples:"
msgstr "簡単な例を示します。"

#: ../../source/spec.rst:977
msgid "The content of the header may span more than one line:"
msgstr "見出しの内容は複数行に渡っても構いません。"

#: ../../source/spec.rst:988
msgid "The underlining can be any length:"
msgstr "見出し線の長さは自由です。"

#: ../../source/spec.rst:1001
msgid ""
"The heading content can be indented up to three spaces, and need not line"
" up with the underlining:"
msgstr "見出しの内容はスペース3つ分までインデントでき、このとき見出し線も一緒にインデントする必要はありません。"

#: ../../source/spec.rst:1019
msgid "Four spaces indent is too much:"
msgstr "スペース4つは多すぎます。"

#: ../../source/spec.rst:1036
msgid ""
"The setext heading underline can be indented up to three spaces, and may "
"have trailing spaces:"
msgstr "setext見出し線はスペース3つまでインデントでき、その後にいくらでもスペースをつけられます。"

#: ../../source/spec.rst:1046
msgid "Four spaces is too much:"
msgstr "スペース4つは多すぎます。"

#: ../../source/spec.rst:1056
msgid "The setext heading underline cannot contain internal spaces:"
msgstr "setext見出し線は、その線の中にスペースを入れてはいけません。"

#: ../../source/spec.rst:1071
msgid "Trailing spaces in the content line do not cause a line break:"
msgstr "見出しの後のスペースは、改行として作用することはありません。"

#: ../../source/spec.rst:1080
msgid "Nor does a backslash at the end:"
msgstr "行末のバックスラッシュも同様に作用しません。"

#: ../../source/spec.rst:1089
msgid ""
"Since indicators of block structure take precedence over indicators of "
"inline structure, the following are setext headings:"
msgstr "ブロック構造の作用素よりインライン構造の作用素の方が優先するため、下の例はsetext型見出しとなります。"

#: ../../source/spec.rst:1107
msgid ""
"The setext heading underline cannot be a [lazy continuation line] in a "
"list item or block quote:"
msgstr "setext見出し線はブロッククォートやリスト項目の中の[lazy continuation line]にはなりません。"

#: ../../source/spec.rst:1142
msgid ""
"A blank line is needed between a paragraph and a following setext "
"heading, since otherwise the paragraph becomes part of the heading's "
"content:"
msgstr "段落と、それに続くsetext見出しの間には空行が必要です。さもなければ、段落は見出しの一部となってしまいます。"

#: ../../source/spec.rst:1155
msgid ""
"But in general a blank line is not required before or after setext "
"headings:"
msgstr "ただし、通常はsetext型見出しの前後には空行は必要ありません。"

#: ../../source/spec.rst:1172
msgid "Setext headings cannot be empty:"
msgstr "setext型見出しは空にはできません。"

#: ../../source/spec.rst:1181
msgid ""
"Setext heading text lines must not be interpretable as block constructs "
"other than paragraphs. So, the line of dashes in these examples gets "
"interpreted as a thematic break:"
msgstr "setext見出しのテキストは、段落以外のブロック構造として解釈されてはいけません。そのため、下の例の ``-`` の連続は、単に区切り線として解釈されます。"

#: ../../source/spec.rst:1222
msgid ""
"If you want a heading with ``> foo`` as its literal text, you can use "
"backslash escapes:"
msgstr "見出しに ``> foo`` とそのまま入れたい場合は、バックスラッシュでエスケープします。"

#: ../../source/spec.rst:1232
msgid ""
"**Compatibility note:** Most existing Markdown implementations do not "
"allow the text of setext headings to span multiple lines. But there is no"
" consensus about how to interpret"
msgstr "**互換性のための注意事項:** 既存のMarkdown実装のほとんどは、複数行にわたるsetext見出しのテキストを許容していません。しかし、どのように解釈すべきかというコンセンサスもありません。"

#: ../../source/spec.rst:1243
msgid "One can find four different interpretations:"
msgstr "4つの異なる解釈があります:"

#: ../../source/spec.rst:1245
msgid "paragraph \"Foo\", heading \"bar\", paragraph \"baz\""
msgstr "段落の\"Foo\"、見出しの\"bar\"、段落の\"baz\""

#: ../../source/spec.rst:1246
msgid "paragraph \"Foo bar\", thematic break, paragraph \"baz\""
msgstr "段落の\"Foo bar\"、区切り線、段落の\"baz\""

#: ../../source/spec.rst:1247
msgid "paragraph \"Foo bar --- baz\""
msgstr "段落の\"Foo bar --- baz\""

#: ../../source/spec.rst:1248
msgid "heading \"Foo bar\", paragraph \"baz\""
msgstr "見出しの\"Foo bar\"、段落の\"baz\""

#: ../../source/spec.rst:1250
msgid ""
"We find interpretation 4 most natural, and interpretation 4 increases the"
" expressive power of CommonMark, by allowing multiline headings. Authors "
"who want interpretation 1 can put a blank line after the first paragraph:"
msgstr "4番目の解釈が最も自然であり、このように複数行の見出しを許容することでCommonMarkの表現力が増すと分かりました。1番目の解釈を求める著者は、最初の段落の後に空行を入れればよいです。"

#: ../../source/spec.rst:1267
msgid ""
"Authors who want interpretation 2 can put blank lines around the thematic"
" break,"
msgstr "2番目の解釈を求める著者は、区切り線の前後に空行を入れればよいです。"

#: ../../source/spec.rst:1284
msgid ""
"or use a thematic break that cannot count as a [setext heading "
"underline], such as"
msgstr "あるいは下のように、[setext区切り線]にならない区切り線を使うことです。"

#: ../../source/spec.rst:1299
msgid "Authors who want interpretation 3 can use backslash escapes:"
msgstr "3番目の解釈を求める著者はバックスラッシュによるエスケープを使えます。"

#: ../../source/spec.rst:1314
msgid "Indented code blocks"
msgstr "インデントされたコードブロック"

#: ../../source/spec.rst:1316
msgid ""
"An `indented code block <@>`__ is composed of one or more [indented "
"chunks] separated by blank lines. An `indented chunk <@>`__ is a sequence"
" of non-blank lines, each indented four or more spaces. The contents of "
"the code block are the literal contents of the lines, including trailing "
"[line endings], minus four spaces of indentation. An indented code block "
"has no [info string]."
msgstr "`インデントされたコードブロック <@>`__ は空行で挟まれた、1行以上の[インデントされた文章]により成ります。`インデントされた文章 <@>`__ は4つ以上のスペースでそれぞれインデントされた空行以外の文字列のことです。コードブロックの内容は行中の文字列であり、これは[行終端]を含み、インデントのためのスペース4つを除いたものです。インデントされたコードブロックは[情報文字列]を持ちません。"

#: ../../source/spec.rst:1323
msgid ""
"An indented code block cannot interrupt a paragraph, so there must be a "
"blank line between a paragraph and a following indented code block. (A "
"blank line is not needed, however, between a code block and a following "
"paragraph.)"
msgstr "インデントされたコードブロックは段落を分割しないので、段落とそれに続くコードブロックの間には空行が必要です。(コードブロックとそれに続く段落の間には空行は必要ありません。)"

#: ../../source/spec.rst:1337
msgid ""
"If there is any ambiguity between an interpretation of indentation as a "
"code block and as indicating that material belongs to a [list item][list "
"items], the list item interpretation takes precedence:"
msgstr "コードブロックなのか、[リスト項目]に属するものなのか、インデントの解釈に曖昧さが残る場合は、リスト項目の解釈が優先されます。"

#: ../../source/spec.rst:1369
msgid ""
"The contents of a code block are literal text, and do not get parsed as "
"Markdown:"
msgstr "コードブロックの内容は単なるテキストで、Markdownとしてパースはされません。"

#: ../../source/spec.rst:1385
msgid "Here we have three chunks separated by blank lines:"
msgstr "これは空行で挟まれた3つの文章になります。"

#: ../../source/spec.rst:1406
msgid ""
"Any initial spaces beyond four will be included in the content, even in "
"interior blank lines:"
msgstr "4個を超えるはじめのスペースは、たとえ空行であってもコードブロックの内容となります。"

#: ../../source/spec.rst:1420
msgid ""
"An indented code block cannot interrupt a paragraph. (This allows hanging"
" indents and the like.)"
msgstr "インデントされたコードブロックは段落を分割しません。（これは文章中のぶら下げインデントとなります。）"

#: ../../source/spec.rst:1432
msgid ""
"However, any non-blank line with fewer than four leading spaces ends the "
"code block immediately. So a paragraph may occur immediately after "
"indented code:"
msgstr "しかし、4つ未満のスペースから始まる非空行はコードブロックを即座に打ち切ります。つまり、段落はインデントされたコードブロックの直後から始められます。"

#: ../../source/spec.rst:1445
msgid ""
"And indented code can occur immediately before and after other kinds of "
"blocks:"
msgstr "さらに、インデントされたコードブロックは他のブロックの直前あるいは直後から始められます。"

#: ../../source/spec.rst:1465
msgid "The first line can be indented more than four spaces:"
msgstr "最初の行は4つ以上のスペースでインデントできます。"

#: ../../source/spec.rst:1476
msgid ""
"Blank lines preceding or following an indented code block are not "
"included in it:"
msgstr "インデントされたコードブロックの前後の空行は無視されます。"

#: ../../source/spec.rst:1490
msgid "Trailing spaces are included in the code block's content:"
msgstr "文章の末尾のスペースも、コードブロックの内容とはなりません。"

#: ../../source/spec.rst:1500
msgid "Fenced code blocks"
msgstr "囲われたコードブロック"

#: ../../source/spec.rst:1502
msgid ""
"A `code fence <@>`__ is a sequence of at least three consecutive backtick"
" characters (:literal:`\\``) or tildes (``~``). (Tildes and backticks "
"cannot be mixed.) A `fenced code block <@>`__ begins with a code fence, "
"indented no more than three spaces."
msgstr "`コードフェンス <@>`__ とはバッククォート(:literal:`\\``)かチルダ(``~``)が3つ以上連続した文字列です。（チルダとバッククォートを混合して使うことはできません。）`囲われたコードブロック <@>`__ はコードフェンスから始まり、3個以内のスペースでインデントされたものです。"

#: ../../source/spec.rst:1507
msgid ""
"The line with the opening code fence may optionally contain some text "
"following the code fence; this is trimmed of leading and trailing "
"whitespace and called the `info string <@>`__. The [info string] may not "
"contain any backtick characters. (The reason for this restriction is that"
" otherwise some inline code would be incorrectly interpreted as the "
"beginning of a fenced code block.)"
msgstr "開始コードフェンスの行には、コードフェンスの後にテキストをつけられます。\n"
"その前後のホワイトスペースを除いた文字列を`情報文字列 <@>`__ といいます。[情報文字列]は、そのなかにバッククォートを含んではいけません。（この制限の理由は、そうしないとインラインコードが囲われたコードブロックの始まりとして不正に解釈されるおそれがあるからです。）"

#: ../../source/spec.rst:1514
msgid ""
"The content of the code block consists of all subsequent lines, until a "
"closing [code fence] of the same type as the code block began with "
"(backticks or tildes), and with at least as many backticks or tildes as "
"the opening code fence. If the leading code fence is indented N spaces, "
"then up to N spaces of indentation are removed from each line of the "
"content (if present). (If a content line is not indented, it is preserved"
" unchanged. If it is indented less than N spaces, all of the indentation "
"is removed.)"
msgstr "コードブロックの内容は、開始コードフェンスと同じ種類の終了[コードフェンス]までの連続するすべての行からなり、終止コードフェンスの文字数は開始のそれと最低でも同じ数です。開始コードフェンスがN個のスペースでインデントされているならば、各行のインデントから（もしあれば）スペースN個ぶんを削除します。(コード行がインデントされていない場合は、特に変化はありません。インデントがN個未満である場合は、すべてのインデントが削除されます。)"

#: ../../source/spec.rst:1523
msgid ""
"The closing code fence may be indented up to three spaces, and may be "
"followed only by spaces, which are ignored. If the end of the containing "
"block (or document) is reached and no closing code fence has been found, "
"the code block contains all of the lines after the opening code fence "
"until the end of the containing block (or document). (An alternative spec"
" would require backtracking in the event that a closing code fence is not"
" found. But this makes parsing much less efficient, and there seems to be"
" no real down side to the behavior described here.)"
msgstr "終止コードフェンスはスペース3つ分までインデントでき、無視されますがスペースを後に続けることができます。内容ブロック（または文書）の終わりがあり、終止コードフェンスがないときは、コードブロックの内容は開始コードブロック後から内容ブロック（または文書）の終わりまでとなります。(その他の仕様は、終了コードブロックが見つからないイベントを撤回することを求めるでしょう。しかし、これはパースを非効率にしてしまい、ここに記したような振る舞いが非現実的なものになってしまいます。)"

#: ../../source/spec.rst:1532
msgid ""
"A fenced code block may interrupt a paragraph, and does not require a "
"blank line either before or after."
msgstr "囲われたコードブロックは段落を分割するので、前後に空行は必要ありません。"

#: ../../source/spec.rst:1535
msgid ""
"The content of a code fence is treated as literal text, not parsed as "
"inlines. The first word of the [info string] is typically used to specify"
" the language of the code sample, and rendered in the ``class`` attribute"
" of the ``code`` tag. However, this spec does not mandate any particular "
"treatment of the [info string]."
msgstr "コードフェンスの内容はそのままのテキストとして扱われ、インラインとしてパースされません。[情報文字列]の最初の語は、たいていコードのサンプルがどの言語なのか示すのに使われ、 ``code`` タグの ``class`` 属性として追加されます。しかし、本仕様では[情報文字列]のどのような処理も必須とはしません。"

#: ../../source/spec.rst:1541
msgid "Here is a simple example with backticks:"
msgstr "バッククォートを用いた簡単な例を示します。"

#: ../../source/spec.rst:1554
msgid "With tildes:"
msgstr "こちらはチルダの例です。"

#: ../../source/spec.rst:1567
msgid "Fewer than three backticks is not enough:"
msgstr "バッククォート3つ未満は十分ではありません。"

#: ../../source/spec.rst:1577
msgid "The closing code fence must use the same character as the opening fence:"
msgstr "終止コードフェンスは開始コードフェンスと同じ文字でなければなりません。"

#: ../../source/spec.rst:1601
msgid "The closing code fence must be at least as long as the opening fence:"
msgstr "終止コードフェンスは開始コードフェンスと同じかそれ以上の文字数でなければなりません。"

#: ../../source/spec.rst:1625
msgid ""
"Unclosed code blocks are closed by the end of the document (or the "
"enclosing [block quote][block quotes] or [list item][list items]):"
msgstr "閉じられていないコードブロックは、文書の終わりで閉じられます。(あるいは[ブロッククォート]または[リスト項目]により閉じられます。)"

#: ../../source/spec.rst:1659
msgid "A code block can have all empty lines as its content:"
msgstr "コードブロックは全てが空行の内容でも構いません。"

#: ../../source/spec.rst:1672
msgid "A code block can be empty:"
msgstr "コードブロックは中身がなくても構いません。"

#: ../../source/spec.rst:1681
msgid ""
"Fences can be indented. If the opening fence is indented, content lines "
"will have equivalent opening indentation removed, if present:"
msgstr "コードフェンスはインデントできます。開始コードフェンスがインデントされている場合、内容の行は、初めのインデントと同じだけのインデントがもしあれば削除されます。"

#: ../../source/spec.rst:1721
msgid "Four spaces indentation produces an indented code block:"
msgstr "スペース4つのインデントはインデントされたコードブロックとなります。"

#: ../../source/spec.rst:1734
msgid ""
"Closing fences may be indented by 0-3 spaces, and their indentation need "
"not match that of the opening fence:"
msgstr "終止コードフェンスは0-3個のスペースでインデントでき、開始コードフェンスのインデントと合わせる必要はないです。"

#: ../../source/spec.rst:1755
msgid "This is not a closing fence, because it is indented 4 spaces:"
msgstr "下の例はインデントにスペース4つを使っているため、終止コードフェンスではありません。"

#: ../../source/spec.rst:1767
msgid "Code fences (opening and closing) cannot contain internal spaces:"
msgstr "(開始と終止)コードフェンスは、間のスペースをコードに入れられません。"

#: ../../source/spec.rst:1787
msgid ""
"Fenced code blocks can interrupt paragraphs, and can be followed directly"
" by paragraphs, without a blank line between:"
msgstr "囲われたコードブロックは段落を分割でき、その直後から空行を挟むことなく段落を始められます。"

#: ../../source/spec.rst:1803
msgid ""
"Other blocks can also occur before and after fenced code blocks without "
"an intervening blank line:"
msgstr "そのほかのブロックも空行を挟むことなく、囲われたコードブロックの直前あるいは直後に続けることができます。"

#: ../../source/spec.rst:1820
msgid ""
"An [info string] can be provided after the opening code fence. Opening "
"and closing spaces will be stripped, and the first word, prefixed with "
"``language-``, is used as the value for the ``class`` attribute of the "
"``code`` element within the enclosing ``pre`` element."
msgstr "[情報文字列]を開始コードフェンスの後に付け加えられます。情報文字列の始めと終わりのスペースは除去され、最初の語は ``language-`` という接頭語をつけて、 ``pre`` 要素直後の ``code`` 要素に付与される ``class`` 属性の値となります。"

#: ../../source/spec.rst:1858
msgid "[Info strings] for backtick code blocks cannot contain backticks:"
msgstr "[情報文字列]にはバッククォートは使用できません。"

#: ../../source/spec.rst:1868
msgid "Closing code fences cannot have [info strings]:"
msgstr "終止コードフェンスには、[情報文字列]をつけることはできません。"

#: ../../source/spec.rst:1880
msgid "HTML blocks"
msgstr "HTMLブロック"

#: ../../source/spec.rst:1882
msgid ""
"An `HTML block <@>`__ is a group of lines that is treated as raw HTML "
"(and will not be escaped in HTML output)."
msgstr "`HTMLブロック <@>`__ 素のHTMLとして処理される行(とHTMLの出力にエスケープされないもの)の集まりです。"

#: ../../source/spec.rst:1885
msgid ""
"There are seven kinds of [HTML block], which can be defined by their "
"start and end conditions. The block begins with a line that meets a "
"`start condition <@>`__ (after up to three spaces optional indentation). "
"It ends with the first subsequent line that meets a matching `end "
"condition <@>`__, or the last line of the document or other [container "
"block]), if no line is encountered that meets the [end condition]. If the"
" first line meets both the [start condition] and the [end condition], the"
" block will contain just that line."
msgstr "7種類の[HTMLブロック]があり、開始と終了状態により定義されます。ブロックは(3スペースまでの任意のインデントをもつ) `開始状態 <@>`__ となる行から始まります。これは `終了状態 <@>`__に合致する行、あるいは[終了状態]がない場合は文書の最終行、他の[コンテナブロック]まで続きます。一番最初の行に[開始状態]と[終了状態]がある場合は、ブロックはこの行だけを含みます。"

#: ../../source/spec.rst:1894
msgid ""
"**Start condition:** line begins with the string ``<script``, ``<pre``, "
"or ``<style`` (case-insensitive), followed by whitespace, the string "
"``>``, or the end of the line.\\\\ **End condition:** line contains an "
"end tag ``</script>``, ``</pre>``, or ``</style>`` (case-insensitive; it "
"need not match the start tag)."
msgstr "**開始状態:** 次の ``<script``, ``<pre``, あるいは ``<style`` (大小文字は関係ありません)という文字列から始まり、 ホワイトスペース、 ``>``あるいは行末で終わる行であり、\\\\ **終了状態:** 次の終了タグで終わる行のこと： ``</script>``, ``</pre>``, あるいは ``</style>`` (大小文字は関係なく、開始タグと合致している必要はありません)。"

#: ../../source/spec.rst:1900
msgid ""
"**Start condition:** line begins with the string ``<!--``.\\\\ **End "
"condition:** line contains the string ``-->``."
msgstr "**開始状態:** ``<!--``で始まる行で、\\\\ **終了状態:** ``-->``で終わる行のこと。"

#: ../../source/spec.rst:1903
msgid ""
"**Start condition:** line begins with the string ``<?``.\\\\ **End "
"condition:** line contains the string ``?>``."
msgstr "**開始状態:** ``<?``で始まる行で、\\\\ **終了状態:** ``?>``で終わる行のこと。"

#: ../../source/spec.rst:1906
msgid ""
"**Start condition:** line begins with the string ``<!`` followed by an "
"uppercase ASCII letter.\\\\ **End condition:** line contains the "
"character ``>``."
msgstr "**開始状態:** ``<!``の後にASCII大文字が続く行で、\\\\ **終了状態:** ``>``で終わる行のこと。"

#: ../../source/spec.rst:1910
msgid ""
"**Start condition:** line begins with the string ``<![CDATA[``.\\\\ **End"
" condition:** line contains the string ``]]>``."
msgstr "**開始状態:** ``<![CDATA[``で始まる行で、\\\\ **終了状態:** ``]]>``で終わる行のこと。"

#: ../../source/spec.rst:1913
msgid ""
"**Start condition:** line begins the string ``<`` or ``</`` followed by "
"one of the strings (case-insensitive) ``address``, ``article``, "
"``aside``, ``base``, ``basefont``, ``blockquote``, ``body``, ``caption``,"
" ``center``, ``col``, ``colgroup``, ``dd``, ``details``, ``dialog``, "
"``dir``, ``div``, ``dl``, ``dt``, ``fieldset``, ``figcaption``, "
"``figure``, ``footer``, ``form``, ``frame``, ``frameset``, ``h1``, "
"``h2``, ``h3``, ``h4``, ``h5``, ``h6``, ``head``, ``header``, ``hr``, "
"``html``, ``iframe``, ``legend``, ``li``, ``link``, ``main``, ``menu``, "
"``menuitem``, ``nav``, ``noframes``, ``ol``, ``optgroup``, ``option``, "
"``p``, ``param``, ``section``, ``source``, ``summary``, ``table``, "
"``tbody``, ``td``, ``tfoot``, ``th``, ``thead``, ``title``, ``tr``, "
"``track``, ``ul``, followed by [whitespace], the end of the line, the "
"string ``>``, or the string ``/>``.\\\\ **End condition:** line is "
"followed by a [blank line]."
msgstr "**開始状態:** ``<`` か ``</``の後、``address``, ``article``, ``aside``, ``base``, ``basefont``, ``blockquote``, ``body``, ``caption``, ``center``, ``col``, ``colgroup``, ``dd``, ``details``, ``dialog``, ``dir``, ``div``, ``dl``, ``dt``, ``fieldset``, ``figcaption``, ``figure``, ``footer``, ``form``, ``frame``, ``frameset``, ``h1``, ``h2``, ``h3``, ``h4``, ``h5``, ``h6``, ``head``, ``header``, ``hr``, ``html``, ``iframe``, ``legend``, ``li``, ``link``, ``main``, ``menu``, ``menuitem``, ``nav``, ``noframes``, ``ol``, ``optgroup``, ``option``, ``p``, ``param``, ``section``, ``source``, ``summary``, ``table``, ``tbody``, ``td``, ``tfoot``, ``th``, ``thead``, ``title``, ``tr``, ``track``, ``ul``の内どれかが大文字小文字関係なく続き、[ホワイトスペース]、行末、``>``のいずれかで終わる行で、\\\\ **終了状態:** [空白行]が続く行のこと。"

#: ../../source/spec.rst:1929
msgid ""
"**Start condition:** line begins with a complete [open tag] or [closing "
"tag] (with any [tag name] other than ``script``, ``style``, or ``pre``) "
"followed only by [whitespace] or the end of the line.\\\\ **End "
"condition:** line is followed by a [blank line]."
msgstr "**開始状態:** 完全な (``script``, ``style``, ``pre`` 以外の[タグ名]の) [開始タグ] または [終止タグ]に[ホワイトスペース]か行末が続く行で、\\\\ **終了状態:** [空白行]が続く行のこと。"

#: ../../source/spec.rst:1934
msgid ""
"HTML blocks continue until they are closed by their appropriate [end "
"condition], or the last line of the document or other [container block]. "
"This means any HTML **within an HTML block** that might otherwise be "
"recognised as a start condition will be ignored by the parser and passed "
"through as-is, without changing the parser's state."
msgstr "HTMLブロックは、適切な[終了状態]によって閉じられるか、文書の最終行、他の[コンテナブロック]が来るまで続きます。つまり、 開始状態とみなされるもの以外の **HTMLブロックの中の** HTMLはパーサから無視されて、パーサの状態を変えることなくそのままスルーされます。"

#: ../../source/spec.rst:1940
msgid ""
"For instance, ``<pre>`` within a HTML block started by ``<table>`` will "
"not affect the parser state; as the HTML block was started in by start "
"condition 6, it will end at any blank line. This can be surprising:"
msgstr "例えば、``<table>`` から始まるHTMLブロック中の ``<pre>`` はパーサの状態に影響を及ぼしません。HTMLブロックは開始状態6により始まり、空白行が来るまで続くからです。次の例は驚くかもしれません。"

#: ../../source/spec.rst:1961
msgid ""
"In this case, the HTML block is terminated by the newline — the "
"``**Hello**`` text remains verbatim — and regular parsing resumes, with a"
" paragraph, emphasised ``world`` and inline and block HTML following."
msgstr "この場合、HTMLブロックは空白行で終了します― ``**Hello**`` はそのまま残ります―そして通常のパースが行われて段落が始まり、``world`` が強調されて、インライン及びHTMLブロックが続きます。"

#: ../../source/spec.rst:1965
msgid ""
"All types of [HTML blocks] except type 7 may interrupt a paragraph. "
"Blocks of type 7 may not interrupt a paragraph. (This restriction is "
"intended to prevent unwanted interpretation of long tags inside a wrapped"
" paragraph as starting HTML blocks.)"
msgstr "タイプ7以外のすべての[HTMLブロック]は、段落を分割します。タイプ7だけは段落を分割しません。(この制限は、HTMLブロックのはじまりとしてラップされた段落中の長いタグについて望まれない解析が行われるのを防ぐよう意図しています。)"

#: ../../source/spec.rst:1970
msgid "Some simple examples follow. Here are some basic HTML blocks of type 6:"
msgstr "いくつかの簡単な例を下に示します。これはタイプ6のHTMLブロックです。"

#: ../../source/spec.rst:2003
msgid "A block can also start with a closing tag:"
msgstr "ブロックは終止タグから始めることもできます。"

#: ../../source/spec.rst:2013
msgid "Here we have two HTML blocks with a Markdown paragraph between them:"
msgstr "これは、2つのHTMLブロックと、それらに挟まれたMarkdown段落です。"

#: ../../source/spec.rst:2027
msgid ""
"The tag on the first line can be partial, as long as it is split where "
"there would be whitespace:"
msgstr "最初の行のタグは、ホワイトスペースで分けるような感じと同様に一部だけ書くということができます。"

#: ../../source/spec.rst:2050
msgid "An open tag need not be closed:"
msgstr "開始タグは閉じる必要はありません。"

#: ../../source/spec.rst:2063
msgid "A partial tag need not even be completed (garbage in, garbage out):"
msgstr "途中まで書いたタグも、すべて書く必要はありません(「ゴミを入れれば、ゴミが出てくる」の原則です)。"

#: ../../source/spec.rst:2081
msgid ""
"The initial tag doesn't even need to be a valid tag, as long as it starts"
" like one:"
msgstr "最初のタグは適正なタグである必要はなく、次のような形で始めることができます。"

#: ../../source/spec.rst:2092
msgid "In type 6 blocks, the initial tag need not be on a line by itself:"
msgstr "タイプ6のブロックでは、最初のタグを1行に収める必要はありません。"

#: ../../source/spec.rst:2110
msgid ""
"Everything until the next blank line or end of document gets included in "
"the HTML block. So, in the following example, what looks like a Markdown "
"code block is actually part of the HTML block, which continues until a "
"blank line or the end of the document is reached:"
msgstr "空白行か文書の終わりが来るまでのすべてがHTMLブロックに含まれます。つまり、次の例では、Markdownコードブロックに見えるものは実際にはHTMLブロックの一部で、これは空白行か文書の終わりが来るまで続きます。"

#: ../../source/spec.rst:2127
msgid ""
"To start an [HTML block] with a tag that is *not* in the list of block-"
"level tags in (6), you must put the tag by itself on the first line (and "
"it must be complete):"
msgstr "タイプ6にあるブロックレベルタグ *ではない* タグで[HTMLブロック]を始めるには、 このタグを最初の行に置く必要があります(そしてそれは完全な形でなければなりません)。"

#: ../../source/spec.rst:2141
msgid "In type 7 blocks, the [tag name] can be anything:"
msgstr "タイプ7のブロックでは、[タグ名]はなんでも許容されます。"

#: ../../source/spec.rst:2171
msgid ""
"These rules are designed to allow us to work with tags that can function "
"as either block-level or inline-level tags. The ``<del>`` tag is a nice "
"example. We can surround content with ``<del>`` tags in three different "
"ways. In this case, we get a raw HTML block, because the ``<del>`` tag is"
" on a line by itself:"
msgstr "これらのルールはブロックレベルとインラインレベルのいずれにおいても機能するタグを使えるようにするために設計されています。``<del>`` タグはよい例です。3つの方法で、 ``<del>`` タグで内容を囲むことができます。下の例では、素のHTMLブロックを得られます。 ``<del>`` タグはそれ自身で1行となっているためです。"

#: ../../source/spec.rst:2187
msgid ""
"In this case, we get a raw HTML block that just includes the ``<del>`` "
"tag (because it ends with the following blank line). So the contents get "
"interpreted as CommonMark:"
msgstr "下の例では、 ``<del>`` と入っただけの素のHTMLブロックを得られます(HTMLブロックが次の空白行で終わっているためです)。そのため、内容はCommonMarkとして解釈されます。"

#: ../../source/spec.rst:2203
msgid ""
"Finally, in this case, the ``<del>`` tags are interpreted as [raw HTML] "
"*inside* the CommonMark paragraph. (Because the tag is not on a line by "
"itself, we get inline HTML rather than an [HTML block].)"
msgstr "最後に下の例では、 ``<del>`` タグはCommonMark段落の *中の* [素のHTML]として解釈されます。(なぜなら、タグはそれ自身で1行となっていないので、[HTMLブロック]ではなくインラインHTMLが出力されるためです。)"

#: ../../source/spec.rst:2213
msgid ""
"HTML tags designed to contain literal content (``script``, ``style``, "
"``pre``), comments, processing instructions, and declarations are treated"
" somewhat differently. Instead of ending at the first blank line, these "
"blocks end at the first line containing a corresponding end tag. As a "
"result, these blocks can contain blank lines:"
msgstr "HTMLタグはリテラルコンテンツ(``script``, ``style``, ``pre``)、コメント、処理命令、何かを処理するための宣言を含めるように設計されています。最初の空白行によるブロックの終わりの代わりに、次のブロックは関連する終止タグを含む行まで続きます。結果として、これらのブロックは空白行を含めることができます。"

#: ../../source/spec.rst:2219
msgid "A pre tag (type 1):"
msgstr "preタグ (タイプ1):"

#: ../../source/spec.rst:2239
msgid "A script tag (type 1):"
msgstr "scriptタグ (タイプ1):"

#: ../../source/spec.rst:2257
msgid "A style tag (type 1):"
msgstr "styleタグ (タイプ1):"

#: ../../source/spec.rst:2277
msgid ""
"If there is no matching end tag, the block will end at the end of the "
"document (or the enclosing [block quote][block quotes] or [list "
"item][list items]):"
msgstr "合致する終止タグがない場合、ブロックは文書の終わり(あるいは[リスト項目]や[ブロッククォート])まで続きます。"

#: ../../source/spec.rst:2318
msgid "The end tag can occur on the same line as the start tag:"
msgstr "終止タグは開始タグと同じ行においても構いません。"

#: ../../source/spec.rst:2336
msgid ""
"Note that anything on the last line after the end tag will be included in"
" the [HTML block]:"
msgstr "最終行にある終止タグの後の文字列も[HTMLブロック]であることに注意してください。"

#: ../../source/spec.rst:2349
msgid "A comment (type 2):"
msgstr "コメント (タイプ2):"

#: ../../source/spec.rst:2365
msgid "A processing instruction (type 3):"
msgstr "処理命令 (タイプ3):"

#: ../../source/spec.rst:2383
msgid "A declaration (type 4):"
msgstr "宣言 (タイプ4):"

#: ../../source/spec.rst:2391
msgid "CDATA (type 5):"
msgstr "CDATA (タイプ5):"

#: ../../source/spec.rst:2423
msgid "The opening tag can be indented 1-3 spaces, but not 4:"
msgstr "開始タグは1-3個のスペースでインデントできますが、4個ではできません。"

#: ../../source/spec.rst:2445
msgid ""
"An HTML block of types 1--6 can interrupt a paragraph, and need not be "
"preceded by a blank line."
msgstr "タイプ1-6のHTMLブロックは段落を分割するので、ブロックの前に空白行を入れる必要はありません。"

#: ../../source/spec.rst:2460
msgid ""
"However, a following blank line is needed, except at the end of a "
"document, and except for blocks of types 1--5, [above][HTML block]:"
msgstr "しかし、タイプ1-5の[HTMLブロック]以外では、文書の終わり以外ブロックの後に空白行を入れなければなりません。"

#: ../../source/spec.rst:2475
msgid "HTML blocks of type 7 cannot interrupt a paragraph:"
msgstr "タイプ7のHTMLブロックは段落を分割できません。"

#: ../../source/spec.rst:2487
msgid ""
"This rule differs from John Gruber's original Markdown syntax "
"specification, which says:"
msgstr "この規則はJohn GruberのオリジナルのMarkdown文法仕様とは異なり、元は次のように規定しています："

#: ../../source/spec.rst:2490
msgid ""
"The only restrictions are that block-level HTML elements — e.g. "
"``<div>``, ``<table>``, ``<pre>``, ``<p>``, etc. — must be separated from"
" surrounding content by blank lines, and the start and end tags of the "
"block should not be indented with tabs or spaces."
msgstr "唯一の制限は、ブロックレベルHTML要素 — 例えば ``<div>``, ``<table>``, ``<pre>``, ``<p>``, など — はタグに挟まれた内容とは空白行で離れていなければならず、ブロックの開始と終止タグはタブやスペースでインデントされるべきではない。"

#: ../../source/spec.rst:2495
msgid "In some ways Gruber's rule is more restrictive than the one given here:"
msgstr "いくつかの点で、Gruberの規則はここで提案しているものより制限的です。"

#: ../../source/spec.rst:2497
msgid "It requires that an HTML block be preceded by a blank line."
msgstr "HTMLブロックの前に空白行が必要。"

#: ../../source/spec.rst:2498
msgid "It does not allow the start tag to be indented."
msgstr "開始タグがインデントされてはならない。"

#: ../../source/spec.rst:2499
msgid ""
"It requires a matching end tag, which it also does not allow to be "
"indented."
msgstr "終止タグがマッチしている必要があり、これもインデントされてはならない。"

#: ../../source/spec.rst:2502
msgid ""
"Most Markdown implementations (including some of Gruber's own) do not "
"respect all of these restrictions."
msgstr "ほとんどのMarkdown実装 (Gruberのものも含む) では、これらの制限は遵守されていません。"

#: ../../source/spec.rst:2505
msgid ""
"There is one respect, however, in which Gruber's rule is more liberal "
"than the one given here, since it allows blank lines to occur inside an "
"HTML block. There are two reasons for disallowing them here. First, it "
"removes the need to parse balanced tags, which is expensive and can "
"require backtracking from the end of the document if no matching end tag "
"is found. Second, it provides a very simple and flexible way of including"
" Markdown content inside HTML tags: simply separate the Markdown from the"
" HTML using blank lines:"
msgstr "しかしながら、ここで提案しているものより寛容なGruberの規則で遵守されているものもあり、HTMLブロックの中に空白行を許容するというものです。ここでは2つの理由からそれを許容していません。第一に、危ういタグをパースする必要性を除くためで、これは高負荷となり、もし終止タグが見つからなかったときに文書の終わりから戻って処理する必要があるからです第二に、HTMLタグの中にMarkdownコンテンツを含める簡単で自由度の高い方法だからです。単純に空白行を使ってHTMLタグからMarkdownを離せばいいのです。"

#: ../../source/spec.rst:2514
msgid "Compare:"
msgstr "下に比較を示します。"

#: ../../source/spec.rst:2538
msgid ""
"Some Markdown implementations have adopted a convention of interpreting "
"content inside tags as text if the open tag has the attribute "
"``markdown=1``. The rule given above seems a simpler and more elegant way"
" of achieving the same expressive power, which is also much simpler to "
"parse."
msgstr "いくつかのMarkdown実装では、開始タグに ``markdown=1`` という属性がある場合に、タグの中をMarkdownテキストとして解釈するという慣習を受け入れているものもあります。上で示した規則は、単純で同様の表現力を達成するよりエレガントな方法であり、パースも簡単になります。"

#: ../../source/spec.rst:2544
#, python-format
msgid ""
"The main potential drawback is that one can no longer paste HTML blocks "
"into Markdown documents with 100% reliability. However, *in most cases* "
"this will work fine, because the blank lines in HTML are usually followed"
" by HTML block tags. For example:"
msgstr "欠点となりうるところは、100％の信頼度でMarkdown文書の中にHTMLブロックをペーストできないことです。しかし、 *ほとんどの場合では、* これはきちんと働きます。HTML中の空白行はたいていHTMLブロックのタグの後にあるためです。礼を示します。"

#: ../../source/spec.rst:2571
msgid ""
"There are problems, however, if the inner tags are indented *and* "
"separated by spaces, as then they will be interpreted as an indented code"
" block:"
msgstr "しかしながら問題はあり、中のタグがインデントされて、 *かつ* スペースで分けられている場合、これらをインデントされたコードブロックとして解釈してしまいます。"

#: ../../source/spec.rst:2598
msgid ""
"Fortunately, blank lines are usually not necessary and can be deleted. "
"The exception is inside ``<pre>`` tags, but as described [above][HTML "
"blocks], raw HTML blocks starting with ``<pre>`` *can* contain blank "
"lines."
msgstr "幸運なことに、空白行は通常必要なく、削除可能です。``<pre>`` タグの中は例外ですが、[HTMLブロック]の項でも示したように、``<pre>`` から始まる素のHTMLブロックは空白行を含めることが *できます* 。"

#: ../../source/spec.rst:2604
msgid "Link reference definitions"
msgstr "リンク参照定義"

#: ../../source/spec.rst:2606
msgid ""
"A `link reference definition <@>`__ consists of a [link label], indented "
"up to three spaces, followed by a colon (``:``), optional [whitespace] "
"(including up to one [line ending]), a [link destination], optional "
"[whitespace] (including up to one [line ending]), and an optional [link "
"title], which if it is present must be separated from the [link "
"destination] by [whitespace]. No further [non-whitespace characters] may "
"occur on the line."
msgstr "`リンク参照定義 <@>`__ はスペース3個までのインデントの後の[リンクラベル]にコロン(``:``)を続け、任意の[ホワイトスペース] (1つの[行終端]を含む)、[リンク先]、任意の[ホワイトスペース] (1つの[行終端]を含む)、任意の[リンクタイトル]からなり、リンクタイトルがある場合は[ホワイトスペース]によって[リンク先]から離されていなければなりません。そのほかの[非ホワイトスペース文字]はこの行にあってはいけません。"

#: ../../source/spec.rst:2614
msgid ""
"A [link reference definition] does not correspond to a structural element"
" of a document. Instead, it defines a label which can be used in "
"[reference links] and reference-style [images] elsewhere in the document."
" [Link reference definitions] can come either before or after the links "
"that use them."
msgstr "[リンク参照定義]は文書の構造要素とは何ら関連しません。代わりに、文書のどこにでも使える[参照リンク]や参照形式の[画像]に使われるラベルを定義します。[リンク参照定義]は定義が使用されているリンクの前でも後でも書くことができます。"

#: ../../source/spec.rst:2656
msgid "The title may extend over multiple lines:"
msgstr "タイトルは複数行にわたってもかまいません。"

#: ../../source/spec.rst:2674
msgid "However, it may not contain a [blank line]:"
msgstr "ただし、[空白行]は使えません。"

#: ../../source/spec.rst:2688 ../../source/spec.rst:6796
msgid "The title may be omitted:"
msgstr "タイトルは省略できます。"

#: ../../source/spec.rst:2699
msgid "The link destination may not be omitted:"
msgstr "リンク先は省略できません。"

#: ../../source/spec.rst:2710
msgid ""
"Both title and destination can contain backslash escapes and literal "
"backslashes:"
msgstr "タイトルとリンク先の両方ともバックスラッシュによるエスケープとバックスラッシュ自身を含めることができます。"

#: ../../source/spec.rst:2721
msgid "A link can come before its corresponding definition:"
msgstr "リンクは、それに関わる定義の前に書くことができます。"

#: ../../source/spec.rst:2731
msgid "If there are several matching definitions, the first one takes precedence:"
msgstr "複数の定義がマッチする場合は、一番最初のものが優先されます。"

#: ../../source/spec.rst:2743
msgid ""
"As noted in the section on [Links], matching of labels is case-"
"insensitive (see [matches])."
msgstr "[リンク]で注記するように、ラベルは大小文字に関係なくマッチします([マッチ]を参照)。"

#: ../../source/spec.rst:2762
msgid ""
"Here is a link reference definition with no corresponding link. It "
"contributes nothing to the document."
msgstr "これは参照するリンクのないリンク参照定義です。これは文書に何も及ぼしません。"

#: ../../source/spec.rst:2770
msgid "Here is another one:"
msgstr "他の例を示します。"

#: ../../source/spec.rst:2781
msgid ""
"This is not a link reference definition, because there are [non-"
"whitespace characters] after the title:"
msgstr "これはタイトルの後に[非ホワイトスペース文字]があるため、リンク参照定義とはなりません。"

#: ../../source/spec.rst:2790
msgid "This is a link reference definition, but it has no title:"
msgstr "これはリンク参照定義ですが、タイトルはありません。"

#: ../../source/spec.rst:2799
msgid ""
"This is not a link reference definition, because it is indented four "
"spaces:"
msgstr "これは4個のスペースでインデントされているので、リンク参照定義とはなりません。"

#: ../../source/spec.rst:2812
msgid ""
"This is not a link reference definition, because it occurs inside a code "
"block:"
msgstr "これはコードブロックとなるので、リンク参照定義とはなりません。"

#: ../../source/spec.rst:2827
msgid "A [link reference definition] cannot interrupt a paragraph."
msgstr "[リンク参照定義]は段落を分割しません。"

#: ../../source/spec.rst:2840
msgid ""
"However, it can directly follow other block elements, such as headings "
"and thematic breaks, and it need not be followed by a blank line."
msgstr "しかし、見出しや区切り線といったほかのブロック要素の直後にある場合、空行を前もって入れる必要はありません。"

#: ../../source/spec.rst:2854
msgid ""
"Several [link reference definitions] can occur one after another, without"
" intervening blank lines."
msgstr "複数の[リンク参照定義]を、空白行を挟むことなく続けて書くことができます。"

#: ../../source/spec.rst:2872
msgid ""
"[Link reference definitions] can occur inside block containers, like "
"lists and block quotations. They affect the entire document, not just the"
" container in which they are defined:"
msgstr "[リンク参照定義]はリストやブロッククォートのようなブロックコンテナの中に記述できます。 これらは定義したコンテナだけでなく、文書全体に影響します。"

#: ../../source/spec.rst:2887
msgid "Paragraphs"
msgstr "段落"

#: ../../source/spec.rst:2889
msgid ""
"A sequence of non-blank lines that cannot be interpreted as other kinds "
"of blocks forms a `paragraph <@>`__. The contents of the paragraph are "
"the result of parsing the paragraph's raw content as inlines. The "
"paragraph's raw content is formed by concatenating the lines and removing"
" initial and final [whitespace]."
msgstr "どの種類のブロックにも解釈されない非空白行が連続した行は `段落 <@>`__ を形成します。"
"段落の内容は、段落のそのままの内容をインライン要素として解釈した結果です。"
"段落のそのままの内容は、最初と最後の[ホワイトスペース]を削除し、各行を連結したものです。"

#: ../../source/spec.rst:2895
msgid "A simple example with two paragraphs:"
msgstr "2つの段落を持つ簡単な例を示します。"

#: ../../source/spec.rst:2906
msgid "Paragraphs can contain multiple lines, but no blank lines:"
msgstr "段落は複数行にわたって書けますが、空白行は入れられません。"

#: ../../source/spec.rst:2921
msgid "Multiple blank lines between paragraph have no effect:"
msgstr "段落の間の複数の空白行は、特に何も効果はありません。"

#: ../../source/spec.rst:2933
msgid "Leading spaces are skipped:"
msgstr "初めのスペースは無視されます。"

#: ../../source/spec.rst:2943
msgid ""
"Lines after the first may be indented any amount, since indented code "
"blocks cannot interrupt paragraphs."
msgstr "インデントされたコードブロックは段落を分割しないため、段落の2行目以降はいくらでもインデントできます。"

#: ../../source/spec.rst:2956
msgid ""
"However, the first line may be indented at most three spaces, or an "
"indented code block will be triggered:"
msgstr "しかしながら、最初の行はスペース3つまでしかインデントできません。さもないと、インデントされたコードブロックになってしまいます。"

#: ../../source/spec.rst:2976
msgid ""
"Final spaces are stripped before inline parsing, so a paragraph that ends"
" with two or more spaces will not end with a [hard line break]:"
msgstr "最後のスペースはインラインパースの前に削除されるため、2個以上のスペースがある行でも[強制改行]はされません。"

#: ../../source/spec.rst:2988
msgid "Blank lines"
msgstr "空白行"

#: ../../source/spec.rst:2990
msgid ""
"[Blank lines] between block-level elements are ignored, except for the "
"role they play in determining whether a [list] is [tight] or [loose]."
msgstr "ブロックレベル要素の間の[空白行]は無視されますが、例外的に[リスト]が[タイト]か[ルーズ]かを決定する役目を担うことがあります。"

#: ../../source/spec.rst:2993
msgid "Blank lines at the beginning and end of the document are also ignored."
msgstr "文書の最初と最後の空白行は無視されます。"

#: ../../source/spec.rst:3010
msgid "Container blocks"
msgstr "コンテナブロック"

#: ../../source/spec.rst:3012
msgid ""
"A [container block] is a block that has other blocks as its contents. "
"There are two basic kinds of container blocks: [block quotes] and [list "
"items]. [Lists] are meta-containers for [list items]."
msgstr "[コンテナブロック]は自らの中に他のブロックを持つブロックのことです。"
"2つの基本的なコンテナブロックがあり、これは[ブロッククォート]と[リスト項目]です。"
"[リスト]は[リスト項目]のためのメタコンテナです。"

#: ../../source/spec.rst:3016
msgid ""
"We define the syntax for container blocks recursively. The general form "
"of the definition is:"
msgstr "コンテナブロックの文法は再帰的に定義されています。"
"一般的な定義は次の通りです。"

#: ../../source/spec.rst:3019
msgid ""
"If X is a sequence of blocks, then the result of transforming X in such-"
"and-such a way is a container of type Y with these blocks as its content."
msgstr "Xがブロックの連続ならば、何らかの方法でXを変換した結果は、それを中身とするYのコンテナとなる。"

#: ../../source/spec.rst:3023
msgid ""
"So, we explain what counts as a block quote or list item by explaining "
"how these can be *generated* from their contents. This should suffice to "
"define the syntax, although it does not give a recipe for *parsing* these"
" constructions. (A recipe is provided below in the section entitled `A "
"parsing strategy <#appendix-a-parsing-strategy>`__.)"
msgstr "つまり、何をブロッククォートやリスト項目にカウントするかは、それらがどのようにしてそれらの内容から *生成されるか* を説明することによって示しているのです。"
"これは文法を定義するには十分なはずですが、それらの構造を *パースする* やり方については示されません。"
"(`パース戦略 <#appendix-a-parsing-strategy>`__という章でこのレシピについて記しています。)"

#: ../../source/spec.rst:3030
msgid "Block quotes"
msgstr ""

#: ../../source/spec.rst:3032
msgid ""
"A `block quote marker <@>`__ consists of 0-3 spaces of initial indent, "
"plus (a) the character ``>`` together with a following space, or (b) a "
"single character ``>`` not followed by a space."
msgstr ""

#: ../../source/spec.rst:3036
msgid "The following rules define [block quotes]:"
msgstr ""

#: ../../source/spec.rst:3038
msgid ""
"**Basic case.** If a string of lines *Ls* constitute a sequence of blocks"
" *Bs*, then the result of prepending a [block quote marker] to the "
"beginning of each line in *Ls* is a `block quote <#block-quotes>`__ "
"containing *Bs*."
msgstr ""

#: ../../source/spec.rst:3043
msgid ""
"**Laziness.** If a string of lines *Ls* constitute a `block quote "
"<#block-quotes>`__ with contents *Bs*, then the result of deleting the "
"initial [block quote marker] from one or more lines in which the next "
"[non-whitespace character] after the [block quote marker] is [paragraph "
"continuation text] is a block quote with *Bs* as its content. `Paragraph "
"continuation text <@>`__ is text that will be parsed as part of the "
"content of a paragraph, but does not occur at the beginning of the "
"paragraph."
msgstr ""

#: ../../source/spec.rst:3052
msgid ""
"**Consecutiveness.** A document cannot contain two [block quotes] in a "
"row unless there is a [blank line] between them."
msgstr ""

#: ../../source/spec.rst:3055
msgid "Nothing else counts as a `block quote <#block-quotes>`__."
msgstr ""

#: ../../source/spec.rst:3057 ../../source/spec.rst:7151
msgid "Here is a simple example:"
msgstr ""

#: ../../source/spec.rst:3071
msgid "The spaces after the ``>`` characters can be omitted:"
msgstr ""

#: ../../source/spec.rst:3085
msgid "The ``>`` characters can be indented 1-3 spaces:"
msgstr ""

#: ../../source/spec.rst:3099
msgid "Four spaces gives us a code block:"
msgstr ""

#: ../../source/spec.rst:3112
msgid ""
"The Laziness clause allows us to omit the ``>`` before [paragraph "
"continuation text]:"
msgstr ""

#: ../../source/spec.rst:3127
msgid "A block quote can contain some lazy and some non-lazy continuation lines:"
msgstr ""

#: ../../source/spec.rst:3142
msgid ""
"Laziness only applies to lines that would have been continuations of "
"paragraphs had they been prepended with [block quote markers]. For "
"example, the ``>`` cannot be omitted in the second line of"
msgstr ""

#: ../../source/spec.rst:3151
msgid "without changing the meaning:"
msgstr ""

#: ../../source/spec.rst:3163
msgid "Similarly, if we omit the ``>`` in the second line of"
msgstr ""

#: ../../source/spec.rst:3170
msgid "then the block quote ends after the first line:"
msgstr ""

#: ../../source/spec.rst:3186
msgid ""
"For the same reason, we can't omit the ``>`` in front of subsequent lines"
" of an indented or fenced code block:"
msgstr ""

#: ../../source/spec.rst:3213
msgid "Note that in the following case, we have a [lazy continuation line]:"
msgstr ""

#: ../../source/spec.rst:3225
msgid "To see why, note that in"
msgstr ""

#: ../../source/spec.rst:3232
msgid ""
"the ``- bar`` is indented too far to start a list, and can't be an "
"indented code block because indented code blocks cannot interrupt "
"paragraphs, so it is [paragraph continuation text]."
msgstr ""

#: ../../source/spec.rst:3236
msgid "A block quote can be empty:"
msgstr ""

#: ../../source/spec.rst:3254
msgid "A block quote can have initial or final blank lines:"
msgstr ""

#: ../../source/spec.rst:3266
msgid "A blank line always separates block quotes:"
msgstr ""

#: ../../source/spec.rst:3281
msgid ""
"(Most current Markdown implementations, including John Gruber's original "
"``Markdown.pl``, will parse this example as a single block quote with two"
" paragraphs. But it seems better to allow the author to decide whether "
"two block quotes or one are wanted.)"
msgstr ""

#: ../../source/spec.rst:3286
msgid ""
"Consecutiveness means that if we put these block quotes together, we get "
"a single block quote:"
msgstr ""

#: ../../source/spec.rst:3299
msgid "To get a block quote with two paragraphs, use:"
msgstr ""

#: ../../source/spec.rst:3312
msgid "Block quotes can interrupt paragraphs:"
msgstr ""

#: ../../source/spec.rst:3324
msgid "In general, blank lines are not needed before or after block quotes:"
msgstr ""

#: ../../source/spec.rst:3340
msgid ""
"However, because of laziness, a blank line is needed between a block "
"quote and a following paragraph:"
msgstr ""

#: ../../source/spec.rst:3375
msgid ""
"It is a consequence of the Laziness rule that any number of initial "
"``>``\\ s may be omitted on a continuation line of a nested block quote:"
msgstr ""

#: ../../source/spec.rst:3408
msgid ""
"When including an indented code block in a block quote, remember that the"
" [block quote marker] includes both the ``>`` and a following space. So "
"*five spaces* are needed after the ``>``:"
msgstr ""

#: ../../source/spec.rst:3427
msgid "List items"
msgstr ""

#: ../../source/spec.rst:3429
msgid ""
"A `list marker <@>`__ is a [bullet list marker] or an [ordered list "
"marker]."
msgstr ""

#: ../../source/spec.rst:3432
msgid "A `bullet list marker <@>`__ is a ``-``, ``+``, or ``*`` character."
msgstr ""

#: ../../source/spec.rst:3434
msgid ""
"An `ordered list marker <@>`__ is a sequence of 1--9 arabic digits "
"(``0-9``), followed by either a ``.`` character or a ``)`` character. "
"(The reason for the length limit is that with 10 digits we start seeing "
"integer overflows in some browsers.)"
msgstr ""

#: ../../source/spec.rst:3439
msgid "The following rules define [list items]:"
msgstr ""

#: ../../source/spec.rst:3441
msgid ""
"**Basic case.** If a sequence of lines *Ls* constitute a sequence of "
"blocks *Bs* starting with a [non-whitespace character] and not separated "
"from each other by more than one blank line, and *M* is a list marker of "
"width *W* followed by 1 ≤ *N* ≤ 4 spaces, then the result of prepending "
"*M* and the following spaces to the first line of *Ls*, and indenting "
"subsequent lines of *Ls* by *W + N* spaces, is a list item with *Bs* as "
"its contents. The type of the list item (bullet or ordered) is determined"
" by the type of its list marker. If the list item is ordered, then it is "
"also assigned a start number, based on the ordered list marker."
msgstr ""

#: ../../source/spec.rst:3452
msgid "Exceptions:"
msgstr ""

#: ../../source/spec.rst:3454
msgid ""
"When the first list item in a [list] interrupts a paragraph---that is, "
"when it starts on a line that would otherwise count as [paragraph "
"continuation text]---then (a) the lines *Ls* must not begin with a blank "
"line, and (b) if the list item is ordered, the start number must be 1."
msgstr ""

#: ../../source/spec.rst:3459
msgid ""
"If any line is a [thematic break][thematic breaks] then that line is not "
"a list item."
msgstr ""

#: ../../source/spec.rst:3462
msgid "For example, let *Ls* be the lines"
msgstr ""

#: ../../source/spec.rst:3481
msgid ""
"And let *M* be the marker ``1.``, and *N* = 2. Then rule #1 says that the"
" following is an ordered list item with start number 1, and the same "
"contents as *Ls*:"
msgstr ""

#: ../../source/spec.rst:3506
msgid ""
"The most important thing to notice is that the position of the text after"
" the list marker determines how much indentation is needed in subsequent "
"blocks in the list item. If the list marker takes up two spaces, and "
"there are three spaces between the list marker and the next [non-"
"whitespace character], then blocks must be indented five spaces in order "
"to fall under the list item."
msgstr ""

#: ../../source/spec.rst:3513
msgid ""
"Here are some examples showing how far content must be indented to be put"
" under the list item:"
msgstr ""

#: ../../source/spec.rst:3565
msgid ""
"It is tempting to think of this in terms of columns: the continuation "
"blocks must be indented at least to the column of the first [non-"
"whitespace character] after the list marker. However, that is not quite "
"right. The spaces after the list marker determine how much relative "
"indentation is needed. Which column this indentation reaches will depend "
"on how the list item is embedded in other constructions, as shown by this"
" example:"
msgstr ""

#: ../../source/spec.rst:3590
msgid ""
"Here ``two`` occurs in the same column as the list marker ``1.``, but is "
"actually contained in the list item, because there is sufficient "
"indentation after the last containing blockquote marker."
msgstr ""

#: ../../source/spec.rst:3594
msgid ""
"The converse is also possible. In the following example, the word ``two``"
" occurs far to the right of the initial text of the list item, ``one``, "
"but it is not considered part of the list item, because it is not "
"indented far enough past the blockquote marker:"
msgstr ""

#: ../../source/spec.rst:3614
msgid ""
"Note that at least one space is needed between the list marker and any "
"following content, so these are not list items:"
msgstr ""

#: ../../source/spec.rst:3626
msgid ""
"A list item may contain blocks that are separated by more than one blank "
"line."
msgstr ""

#: ../../source/spec.rst:3643
msgid "A list item may contain any kind of block:"
msgstr ""

#: ../../source/spec.rst:3669
msgid ""
"A list item that contains an indented code block will preserve empty "
"lines within the code block verbatim."
msgstr ""

#: ../../source/spec.rst:3692
msgid "Note that ordered list start numbers must be nine digits or less:"
msgstr ""

#: ../../source/spec.rst:3708
msgid "A start number may begin with 0s:"
msgstr ""

#: ../../source/spec.rst:3726
msgid "A start number may not be negative:"
msgstr ""

#: ../../source/spec.rst:3734
msgid ""
"**Item starting with indented code.** If a sequence of lines *Ls* "
"constitute a sequence of blocks *Bs* starting with an indented code block"
" and not separated from each other by more than one blank line, and *M* "
"is a list marker of width *W* followed by one space, then the result of "
"prepending *M* and the following space to the first line of *Ls*, and "
"indenting subsequent lines of *Ls* by *W + 1* spaces, is a list item with"
" *Bs* as its contents. If a line is empty, then it need not be indented. "
"The type of the list item (bullet or ordered) is determined by the type "
"of its list marker. If the list item is ordered, then it is also assigned"
" a start number, based on the ordered list marker."
msgstr ""

#: ../../source/spec.rst:3746
msgid ""
"An indented code block will have to be indented four spaces beyond the "
"edge of the region where text will be included in the list item. In the "
"following case that is 6 spaces:"
msgstr ""

#: ../../source/spec.rst:3764
msgid "And in this case it is 11 spaces:"
msgstr ""

#: ../../source/spec.rst:3780
msgid ""
"If the *first* block in the list item is an indented code block, then by "
"rule #2, the contents must be indented *one* space after the list marker:"
msgstr ""

#: ../../source/spec.rst:3816
msgid ""
"Note that an additional space indent is interpreted as space inside the "
"code block:"
msgstr ""

#: ../../source/spec.rst:3837
msgid ""
"Note that rules #1 and #2 only apply to two cases: (a) cases in which the"
" lines to be included in a list item begin with a [non-whitespace "
"character], and (b) cases in which they begin with an indented code "
"block. In a case like the following, where the first block begins with a "
"three-space indent, the rules do not allow us to form a list item by "
"indenting the whole thing and prepending a list marker:"
msgstr ""

#: ../../source/spec.rst:3864
msgid ""
"This is not a significant restriction, because when a block begins with "
"1-3 spaces indent, the indentation can always be removed without a change"
" in interpretation, allowing rule #1 to be applied. So, in the above "
"case:"
msgstr ""

#: ../../source/spec.rst:3882
msgid ""
"**Item starting with a blank line.** If a sequence of lines *Ls* starting"
" with a single [blank line] constitute a (possibly empty) sequence of "
"blocks *Bs*, not separated from each other by more than one blank line, "
"and *M* is a list marker of width *W*, then the result of prepending *M* "
"to the first line of *Ls*, and indenting subsequent lines of *Ls* by *W +"
" 1* spaces, is a list item with *Bs* as its contents. If a line is empty,"
" then it need not be indented. The type of the list item (bullet or "
"ordered) is determined by the type of its list marker. If the list item "
"is ordered, then it is also assigned a start number, based on the ordered"
" list marker."
msgstr ""

#: ../../source/spec.rst:3893
msgid "Here are some list items that start with a blank line but are not empty:"
msgstr ""

#: ../../source/spec.rst:3918
msgid ""
"When the list item starts with a blank line, the number of spaces "
"following the list marker doesn't change the required indentation:"
msgstr ""

#: ../../source/spec.rst:3930
msgid ""
"A list item can begin with at most one blank line. In the following "
"example, ``foo`` is not part of the list item:"
msgstr ""

#: ../../source/spec.rst:3944
msgid "Here is an empty bullet list item:"
msgstr ""

#: ../../source/spec.rst:3958
msgid "It does not matter whether there are spaces following the [list marker]:"
msgstr ""

#: ../../source/spec.rst:3972
msgid "Here is an empty ordered list item:"
msgstr ""

#: ../../source/spec.rst:3986
msgid "A list may start or end with an empty list item:"
msgstr ""

#: ../../source/spec.rst:3996
msgid "However, an empty list item cannot interrupt a paragraph:"
msgstr ""

#: ../../source/spec.rst:4011
msgid ""
"**Indentation.** If a sequence of lines *Ls* constitutes a list item "
"according to rule #1, #2, or #3, then the result of indenting each line "
"of *Ls* by 1-3 spaces (the same for each line) also constitutes a list "
"item with the same contents and attributes. If a line is empty, then it "
"need not be indented."
msgstr ""

#: ../../source/spec.rst:4017
msgid "Indented one space:"
msgstr ""

#: ../../source/spec.rst:4040
msgid "Indented two spaces:"
msgstr ""

#: ../../source/spec.rst:4063
msgid "Indented three spaces:"
msgstr ""

#: ../../source/spec.rst:4086
msgid "Four spaces indent gives a code block:"
msgstr ""

#: ../../source/spec.rst:4105
msgid ""
"**Laziness.** If a string of lines *Ls* constitute a `list item <#list-"
"items>`__ with contents *Bs*, then the result of deleting some or all of "
"the indentation from one or more lines in which the next [non-whitespace "
"character] after the indentation is [paragraph continuation text] is a "
"list item with the same contents and attributes. The unindented lines are"
" called `lazy continuation line <@>`__\\ s."
msgstr ""

#: ../../source/spec.rst:4113
msgid "Here is an example with [lazy continuation lines]:"
msgstr ""

#: ../../source/spec.rst:4136
msgid "Indentation can be partially deleted:"
msgstr ""

#: ../../source/spec.rst:4148
msgid "These examples show how laziness can work in nested structures:"
msgstr ""

#: ../../source/spec.rst:4182
msgid ""
"**That's all.** Nothing that is not counted as a list item by rules #1--5"
" counts as a `list item <#list-items>`__."
msgstr ""

#: ../../source/spec.rst:4185
msgid ""
"The rules for sublists follow from the general rules [above][List items]."
" A sublist must be indented the same number of spaces a paragraph would "
"need to be in order to be included in the list item."
msgstr ""

#: ../../source/spec.rst:4189
msgid "So, in this case we need two spaces indent:"
msgstr ""

#: ../../source/spec.rst:4214
msgid "One is not enough:"
msgstr ""

#: ../../source/spec.rst:4230
msgid "Here we need four, because the list marker is wider:"
msgstr ""

#: ../../source/spec.rst:4245
msgid "Three is not enough:"
msgstr ""

#: ../../source/spec.rst:4259
msgid "A list may be the first block in a list item:"
msgstr ""

#: ../../source/spec.rst:4289
msgid "A list item can contain a heading:"
msgstr ""

#: ../../source/spec.rst:4308
msgid "Motivation"
msgstr ""

#: ../../source/spec.rst:4310
msgid "John Gruber's Markdown spec says the following about list items:"
msgstr ""

#: ../../source/spec.rst:4312
msgid ""
"\"List markers typically start at the left margin, but may be indented by"
" up to three spaces. List markers must be followed by one or more spaces "
"or a tab.\""
msgstr ""

#: ../../source/spec.rst:4316
msgid ""
"\"To make lists look nice, you can wrap items with hanging indents.... "
"But if you don't want to, you don't have to.\""
msgstr ""

#: ../../source/spec.rst:4319
msgid ""
"\"List items may consist of multiple paragraphs. Each subsequent "
"paragraph in a list item must be indented by either 4 spaces or one "
"tab.\""
msgstr ""

#: ../../source/spec.rst:4323
msgid ""
"\"It looks nice if you indent every line of the subsequent paragraphs, "
"but here again, Markdown will allow you to be lazy.\""
msgstr ""

#: ../../source/spec.rst:4326
msgid ""
"\"To put a blockquote within a list item, the blockquote's ``>`` "
"delimiters need to be indented.\""
msgstr ""

#: ../../source/spec.rst:4329
msgid ""
"\"To put a code block within a list item, the code block needs to be "
"indented twice — 8 spaces or two tabs.\""
msgstr ""

#: ../../source/spec.rst:4332
msgid ""
"These rules specify that a paragraph under a list item must be indented "
"four spaces (presumably, from the left margin, rather than the start of "
"the list marker, but this is not said), and that code under a list item "
"must be indented eight spaces instead of the usual four. They also say "
"that a block quote must be indented, but not by how much; however, the "
"example given has four spaces indentation. Although nothing is said about"
" other kinds of block-level content, it is certainly reasonable to infer "
"that *all* block elements under a list item, including other lists, must "
"be indented four spaces. This principle has been called the *four-space "
"rule*."
msgstr ""

#: ../../source/spec.rst:4343
msgid ""
"The four-space rule is clear and principled, and if the reference "
"implementation ``Markdown.pl`` had followed it, it probably would have "
"become the standard. However, ``Markdown.pl`` allowed paragraphs and "
"sublists to start with only two spaces indentation, at least on the outer"
" level. Worse, its behavior was inconsistent: a sublist of an outer-level"
" list needed two spaces indentation, but a sublist of this sublist needed"
" three spaces. It is not surprising, then, that different implementations"
" of Markdown have developed very different rules for determining what "
"comes under a list item. (Pandoc and python-Markdown, for example, stuck "
"with Gruber's syntax description and the four-space rule, while discount,"
" redcarpet, marked, PHP Markdown, and others followed ``Markdown.pl``'s "
"behavior more closely.)"
msgstr ""

#: ../../source/spec.rst:4356
msgid ""
"Unfortunately, given the divergences between implementations, there is no"
" way to give a spec for list items that will be guaranteed not to break "
"any existing documents. However, the spec given here should correctly "
"handle lists formatted with either the four-space rule or the more "
"forgiving ``Markdown.pl`` behavior, provided they are laid out in a way "
"that is natural for a human to read."
msgstr ""

#: ../../source/spec.rst:4363
msgid ""
"The strategy here is to let the width and indentation of the list marker "
"determine the indentation necessary for blocks to fall under the list "
"item, rather than having a fixed and arbitrary number. The writer can "
"think of the body of the list item as a unit which gets indented to the "
"right enough to fit the list marker (and any indentation on the list "
"marker). (The laziness rule, #5, then allows continuation lines to be "
"unindented if needed.)"
msgstr ""

#: ../../source/spec.rst:4371
msgid ""
"This rule is superior, we claim, to any rule requiring a fixed level of "
"indentation from the margin. The four-space rule is clear but unnatural. "
"It is quite unintuitive that"
msgstr ""

#: ../../source/spec.rst:4383
msgid "should be parsed as two lists with an intervening paragraph,"
msgstr ""

#: ../../source/spec.rst:4395
msgid "as the four-space rule demands, rather than a single list,"
msgstr ""

#: ../../source/spec.rst:4409
msgid ""
"The choice of four spaces is arbitrary. It can be learned, but it is not "
"likely to be guessed, and it trips up beginners regularly."
msgstr ""

#: ../../source/spec.rst:4412
msgid ""
"Would it help to adopt a two-space rule? The problem is that such a rule,"
" together with the rule allowing 1--3 spaces indentation of the initial "
"list marker, allows text that is indented *less than* the original list "
"marker to be included in the list item. For example, ``Markdown.pl`` "
"parses"
msgstr ""

#: ../../source/spec.rst:4424
msgid "as a single list item, with ``two`` a continuation paragraph:"
msgstr ""

#: ../../source/spec.rst:4435
msgid "and similarly"
msgstr ""

#: ../../source/spec.rst:4443
msgid "as"
msgstr ""

#: ../../source/spec.rst:4456
msgid "This is extremely unintuitive."
msgstr ""

#: ../../source/spec.rst:4458
msgid ""
"Rather than requiring a fixed indent from the margin, we could require a "
"fixed indent (say, two spaces, or even one space) from the list marker "
"(which may itself be indented). This proposal would remove the last "
"anomaly discussed. Unlike the spec presented above, it would count the "
"following as a list item with a subparagraph, even though the paragraph "
"``bar`` is not indented as far as the first paragraph ``foo``:"
msgstr ""

#: ../../source/spec.rst:4471
msgid ""
"Arguably this text does read like a list item with ``bar`` as a "
"subparagraph, which may count in favor of the proposal. However, on this "
"proposal indented code would have to be indented six spaces after the "
"list marker. And this would break a lot of existing Markdown, which has "
"the pattern:"
msgstr ""

#: ../../source/spec.rst:4483
msgid ""
"where the code is indented eight spaces. The spec above, by contrast, "
"will parse this text as expected, since the code block's indentation is "
"measured from the beginning of ``foo``."
msgstr ""

#: ../../source/spec.rst:4487
msgid ""
"The one case that needs special treatment is a list item that *starts* "
"with indented code. How much indentation is required in that case, since "
"we don't have a \"first paragraph\" to measure from? Rule #2 simply "
"stipulates that in such cases, we require one space indentation from the "
"list marker (and then the normal four spaces for the indented code). This"
" will match the four-space rule in cases where the list marker plus its "
"initial indentation takes four spaces (a common case), but diverge in "
"other cases."
msgstr ""

#: ../../source/spec.rst:4497
msgid "Lists"
msgstr ""

#: ../../source/spec.rst:4499
msgid ""
"A `list <@>`__ is a sequence of one or more list items [of the same "
"type]. The list items may be separated by any number of blank lines."
msgstr ""

#: ../../source/spec.rst:4502
msgid ""
"Two list items are `of the same type <@>`__ if they begin with a [list "
"marker] of the same type. Two list markers are of the same type if (a) "
"they are bullet list markers using the same character (``-``, ``+``, or "
"``*``) or (b) they are ordered list numbers with the same delimiter "
"(either ``.`` or ``)``)."
msgstr ""

#: ../../source/spec.rst:4508
msgid ""
"A list is an `ordered list <@>`__ if its constituent list items begin "
"with [ordered list markers], and a `bullet list <@>`__ if its constituent"
" list items begin with [bullet list markers]."
msgstr ""

#: ../../source/spec.rst:4512
msgid ""
"The `start number <@>`__ of an [ordered list] is determined by the list "
"number of its initial list item. The numbers of subsequent list items are"
" disregarded."
msgstr ""

#: ../../source/spec.rst:4516
msgid ""
"A list is `loose <@>`__ if any of its constituent list items are "
"separated by blank lines, or if any of its constituent list items "
"directly contain two block-level elements with a blank line between them."
" Otherwise a list is `tight <@>`__. (The difference in HTML output is "
"that paragraphs in a loose list are wrapped in ``<p>`` tags, while "
"paragraphs in a tight list are not.)"
msgstr ""

#: ../../source/spec.rst:4523
msgid "Changing the bullet or ordered list delimiter starts a new list:"
msgstr ""

#: ../../source/spec.rst:4553
msgid ""
"In CommonMark, a list can interrupt a paragraph. That is, no blank line "
"is needed to separate a paragraph from a following list:"
msgstr ""

#: ../../source/spec.rst:4568
msgid ""
"``Markdown.pl`` does not allow this, through fear of triggering a list "
"via a numeral in a hard-wrapped line:"
msgstr ""

#: ../../source/spec.rst:4576
msgid ""
"Oddly, though, ``Markdown.pl`` *does* allow a blockquote to interrupt a "
"paragraph, even though the same considerations might apply."
msgstr ""

#: ../../source/spec.rst:4579
msgid ""
"In CommonMark, we do allow lists to interrupt paragraphs, for two "
"reasons. First, it is natural and not uncommon for people to start lists "
"without blank lines:"
msgstr ""

#: ../../source/spec.rst:4590
msgid "Second, we are attracted to a"
msgstr ""

#: ../../source/spec.rst:4592
msgid ""
"`principle of uniformity <@>`__: if a chunk of text has a certain "
"meaning, it will continue to have the same meaning when put into a "
"container block (such as a list item or blockquote)."
msgstr ""

#: ../../source/spec.rst:4596
msgid ""
"(Indeed, the spec for [list items] and [block quotes] presupposes this "
"principle.) This principle implies that if"
msgstr ""

#: ../../source/spec.rst:4606
msgid ""
"is a list item containing a paragraph followed by a nested sublist, as "
"all Markdown implementations agree it is (though the paragraph may be "
"rendered without ``<p>`` tags, since the list is \"tight\"), then"
msgstr ""

#: ../../source/spec.rst:4617
msgid "by itself should be a paragraph followed by a nested sublist."
msgstr ""

#: ../../source/spec.rst:4619
msgid ""
"Since it is well established Markdown practice to allow lists to "
"interrupt paragraphs inside list items, the [principle of uniformity] "
"requires us to allow this outside list items as well. (`reStructuredText "
"<http://docutils.sourceforge.net/rst.html>`__ takes a different approach,"
" requiring blank lines before lists even inside other list items.)"
msgstr ""

#: ../../source/spec.rst:4626
msgid ""
"In order to solve of unwanted lists in paragraphs with hard-wrapped "
"numerals, we allow only lists starting with ``1`` to interrupt "
"paragraphs. Thus,"
msgstr ""

#: ../../source/spec.rst:4638
msgid "We may still get an unintended result in cases like"
msgstr ""

#: ../../source/spec.rst:4650
msgid "but this rule should prevent most spurious list captures."
msgstr ""

#: ../../source/spec.rst:4652
msgid "There can be any number of blank lines between items:"
msgstr ""

#: ../../source/spec.rst:4699
msgid ""
"To separate consecutive lists of the same type, or to separate a list "
"from an indented code block that would otherwise be parsed as a "
"subparagraph of the final list item, you can insert a blank HTML comment:"
msgstr ""

#: ../../source/spec.rst:4749
msgid ""
"List items need not be indented to the same level. The following list "
"items will be treated as items at the same list level, since none is "
"indented enough to belong to the previous list item:"
msgstr ""

#: ../../source/spec.rst:4793
msgid ""
"Note, however, that list items may not be indented more than three "
"spaces. Here ``- e`` is treated as a paragraph continuation line, because"
" it is indented more than three spaces:"
msgstr ""

#: ../../source/spec.rst:4813
msgid ""
"And here, ``3. c`` is treated as in indented code block, because it is "
"indented four spaces and preceded by a blank line."
msgstr ""

#: ../../source/spec.rst:4835
msgid ""
"This is a loose list, because there is a blank line between two of the "
"list items:"
msgstr ""

#: ../../source/spec.rst:4857
msgid "So is this, with a empty second item:"
msgstr ""

#: ../../source/spec.rst:4876
msgid ""
"These are loose lists, even though there is no space between the items, "
"because one of the items directly contains two block-level elements with "
"a blank line between them:"
msgstr ""

#: ../../source/spec.rst:4921
msgid "This is a tight list, because the blank lines are in a code block:"
msgstr ""

#: ../../source/spec.rst:4944
msgid ""
"This is a tight list, because the blank line is between two paragraphs of"
" a sublist. So the sublist is loose while the outer list is tight:"
msgstr ""

#: ../../source/spec.rst:4967
msgid "This is a tight list, because the blank line is inside the block quote:"
msgstr ""

#: ../../source/spec.rst:4985
msgid ""
"This list is tight, because the consecutive block elements are not "
"separated by blank lines:"
msgstr ""

#: ../../source/spec.rst:5008
msgid "A single-paragraph list is tight:"
msgstr ""

#: ../../source/spec.rst:5031
msgid ""
"This list is loose, because of the blank line between the two block "
"elements in the list item:"
msgstr ""

#: ../../source/spec.rst:5050
msgid "Here the outer list is loose, the inner list tight:"
msgstr ""

#: ../../source/spec.rst:5097
msgid "Inlines"
msgstr ""

#: ../../source/spec.rst:5099
msgid ""
"Inlines are parsed sequentially from the beginning of the character "
"stream to the end (left to right, in left-to-right languages). Thus, for "
"example, in"
msgstr ""

#: ../../source/spec.rst:5109
msgid ""
"``hi`` is parsed as code, leaving the backtick at the end as a literal "
"backtick."
msgstr ""

#: ../../source/spec.rst:5113
msgid "Backslash escapes"
msgstr ""

#: ../../source/spec.rst:5115
msgid "Any ASCII punctuation character may be backslash-escaped:"
msgstr ""

#: ../../source/spec.rst:5123
msgid "Backslashes before other characters are treated as literal backslashes:"
msgstr ""

#: ../../source/spec.rst:5131
msgid ""
"Escaped characters are treated as regular characters and do not have "
"their usual Markdown meanings:"
msgstr ""

#: ../../source/spec.rst:5154
msgid "If a backslash is itself escaped, the following character is not:"
msgstr ""

#: ../../source/spec.rst:5162
msgid "A backslash at the end of the line is a [hard line break]:"
msgstr ""

#: ../../source/spec.rst:5172
msgid ""
"Backslash escapes do not work in code blocks, code spans, autolinks, or "
"raw HTML:"
msgstr ""

#: ../../source/spec.rst:5209
msgid ""
"But they work in all other contexts, including URLs and link titles, link"
" references, and [info strings] in [fenced code blocks]:"
msgstr ""

#: ../../source/spec.rst:5236
msgid "Entity and numeric character references"
msgstr ""

#: ../../source/spec.rst:5238
msgid ""
"All valid HTML entity references and numeric character references, except"
" those occuring in code blocks and code spans, are recognized as such and"
" treated as equivalent to the corresponding Unicode characters. "
"Conforming CommonMark parsers need not store information about whether a "
"particular character was represented in the source using a Unicode "
"character or an entity reference."
msgstr ""

#: ../../source/spec.rst:5245
msgid ""
"`Entity references <@>`__ consist of ``&`` + any of the valid HTML5 "
"entity names + ``;``. The document "
"https://html.spec.whatwg.org/multipage/entities.json is used as an "
"authoritative source for the valid entity references and their "
"corresponding code points."
msgstr ""

#: ../../source/spec.rst:5261
msgid ""
"`Decimal numeric character references <@>`__ consist of ``&#`` + a string"
" of 1--7 arabic digits + ``;``. A numeric character reference is parsed "
"as the corresponding Unicode character. Invalid Unicode code points will "
"be replaced by the REPLACEMENT CHARACTER (``U+FFFD``). For security "
"reasons, the code point ``U+0000`` will also be replaced by ``U+FFFD``."
msgstr ""

#: ../../source/spec.rst:5274
msgid ""
"`Hexadecimal numeric character references <@>`__ consist of ``&#`` + "
"either ``X`` or ``x`` + a string of 1-6 hexadecimal digits + ``;``. They "
"too are parsed as the corresponding Unicode character (this time "
"specified with a hexadecimal numeral instead of decimal)."
msgstr ""

#: ../../source/spec.rst:5285
msgid "Here are some nonentities:"
msgstr ""

#: ../../source/spec.rst:5299
msgid ""
"Although HTML5 does accept some entity references without a trailing "
"semicolon (such as ``&copy``), these are not recognized here, because it "
"makes the grammar too ambiguous:"
msgstr ""

#: ../../source/spec.rst:5309
msgid ""
"Strings that are not on the list of HTML5 named entities are not "
"recognized as entity references either:"
msgstr ""

#: ../../source/spec.rst:5318
msgid ""
"Entity and numeric character references are recognized in any context "
"besides code spans or code blocks, including URLs, [link titles], and "
"[fenced code block][] [info strings]:"
msgstr ""

#: ../../source/spec.rst:5351
msgid ""
"Entity and numeric character references are treated as literal text in "
"code spans and code blocks:"
msgstr ""

#: ../../source/spec.rst:5368
msgid "Code spans"
msgstr ""

#: ../../source/spec.rst:5370
msgid ""
"A `backtick string <@>`__ is a string of one or more backtick characters "
"(:literal:`\\``) that is neither preceded nor followed by a backtick."
msgstr ""

#: ../../source/spec.rst:5373
msgid ""
"A `code span <@>`__ begins with a backtick string and ends with a "
"backtick string of equal length. The contents of the code span are the "
"characters between the two backtick strings, with leading and trailing "
"spaces and [line endings] removed, and [whitespace] collapsed to single "
"spaces."
msgstr ""

#: ../../source/spec.rst:5379
msgid "This is a simple code span:"
msgstr ""

#: ../../source/spec.rst:5387
msgid ""
"Here two backticks are used, because the code contains a backtick. This "
"example also illustrates stripping of leading and trailing spaces:"
msgstr ""

#: ../../source/spec.rst:5396
msgid ""
"This example shows the motivation for stripping leading and trailing "
"spaces:"
msgstr ""

#: ../../source/spec.rst:5405
msgid "[Line endings] are treated like spaces:"
msgstr ""

#: ../../source/spec.rst:5415
msgid ""
"Interior spaces and [line endings] are collapsed into single spaces, just"
" as they would be by a browser:"
msgstr ""

#: ../../source/spec.rst:5425
msgid ""
"Not all [Unicode whitespace] (for instance, non-breaking space) is "
"collapsed, however:"
msgstr ""

#: ../../source/spec.rst:5434
msgid ""
"Q: Why not just leave the spaces, since browsers will collapse them "
"anyway? A: Because we might be targeting a non-HTML format, and we "
"shouldn't rely on HTML-specific rendering assumptions."
msgstr ""

#: ../../source/spec.rst:5438
msgid ""
"(Existing implementations differ in their treatment of internal spaces "
"and [line endings]. Some, including ``Markdown.pl`` and ``showdown``, "
"convert an internal [line ending] into a ``<br />`` tag. But this makes "
"things difficult for those who like to hard-wrap their paragraphs, since "
"a line break in the midst of a code span will cause an unintended line "
"break in the output. Others just leave internal spaces as they are, which"
" is fine if only HTML is being targeted.)"
msgstr ""

#: ../../source/spec.rst:5452
msgid ""
"Note that backslash escapes do not work in code spans. All backslashes "
"are treated literally:"
msgstr ""

#: ../../source/spec.rst:5461
msgid ""
"Backslash escapes are never needed, because one can always choose a "
"string of *n* backtick characters as delimiters, where the code does not "
"contain any strings of exactly *n* backtick characters."
msgstr ""

#: ../../source/spec.rst:5465
msgid ""
"Code span backticks have higher precedence than any other inline "
"constructs except HTML tags and autolinks. Thus, for example, this is not"
" parsed as emphasized text, since the second ``*`` is part of a code "
"span:"
msgstr ""

#: ../../source/spec.rst:5476
msgid "And this is not parsed as a link:"
msgstr ""

#: ../../source/spec.rst:5484
msgid ""
"Code spans, HTML tags, and autolinks have the same precedence. Thus, this"
" is code:"
msgstr ""

#: ../../source/spec.rst:5493
msgid "But this is an HTML tag:"
msgstr ""

#: ../../source/spec.rst:5501
msgid "And this is code:"
msgstr ""

#: ../../source/spec.rst:5509
msgid "But this is an autolink:"
msgstr ""

#: ../../source/spec.rst:5517
msgid ""
"When a backtick string is not closed by a matching backtick string, we "
"just have literal backticks:"
msgstr ""

#: ../../source/spec.rst:5532
msgid ""
"The following case also illustrates the need for opening and closing "
"backtick strings to be equal in length:"
msgstr ""

#: ../../source/spec.rst:5542
msgid "Emphasis and strong emphasis"
msgstr ""

#: ../../source/spec.rst:5544
msgid ""
"John Gruber's original `Markdown syntax description "
"<http://daringfireball.net/projects/markdown/syntax#em>`__ says:"
msgstr ""

#: ../../source/spec.rst:5548
msgid ""
"Markdown treats asterisks (``*``) and underscores (``_``) as indicators "
"of emphasis. Text wrapped with one ``*`` or ``_`` will be wrapped with an"
" HTML ``<em>`` tag; double ``*``'s or ``_``'s will be wrapped with an "
"HTML ``<strong>`` tag."
msgstr ""

#: ../../source/spec.rst:5553
msgid ""
"This is enough for most users, but these rules leave much undecided, "
"especially when it comes to nested emphasis. The original ``Markdown.pl``"
" test suite makes it clear that triple ``***`` and ``___`` delimiters can"
" be used for strong emphasis, and most implementations have also allowed "
"the following patterns:"
msgstr ""

#: ../../source/spec.rst:5567
msgid ""
"The following patterns are less widely supported, but the intent is clear"
" and they are useful (especially in contexts like bibliography entries):"
msgstr ""

#: ../../source/spec.rst:5576
msgid ""
"Many implementations have also restricted intraword emphasis to the ``*``"
" forms, to avoid unwanted emphasis in words containing internal "
"underscores. (It is best practice to put these in code spans, but users "
"often do not.)"
msgstr ""

#: ../../source/spec.rst:5586
msgid ""
"The rules given below capture all of these patterns, while allowing for "
"efficient parsing strategies that do not backtrack."
msgstr ""

#: ../../source/spec.rst:5589
msgid ""
"First, some definitions. A `delimiter run <@>`__ is either a sequence of "
"one or more ``*`` characters that is not preceded or followed by a non-"
"backslash-escaped ``*`` character, or a sequence of one or more ``_`` "
"characters that is not preceded or followed by a non-backslash-escaped "
"``_`` character."
msgstr ""

#: ../../source/spec.rst:5595
msgid ""
"A `left-flanking delimiter run <@>`__ is a [delimiter run] that is (a) "
"not followed by [Unicode whitespace], and (b) not followed by a "
"[punctuation character], or preceded by [Unicode whitespace] or a "
"[punctuation character]. For purposes of this definition, the beginning "
"and the end of the line count as Unicode whitespace."
msgstr ""

#: ../../source/spec.rst:5601
msgid ""
"A `right-flanking delimiter run <@>`__ is a [delimiter run] that is (a) "
"not preceded by [Unicode whitespace], and (b) not preceded by a "
"[punctuation character], or followed by [Unicode whitespace] or a "
"[punctuation character]. For purposes of this definition, the beginning "
"and the end of the line count as Unicode whitespace."
msgstr ""

#: ../../source/spec.rst:5607
msgid "Here are some examples of delimiter runs."
msgstr ""

#: ../../source/spec.rst:5609
msgid "left-flanking but not right-flanking:"
msgstr ""

#: ../../source/spec.rst:5618
msgid "right-flanking but not left-flanking:"
msgstr ""

#: ../../source/spec.rst:5627
msgid "Both left and right-flanking:"
msgstr ""

#: ../../source/spec.rst:5634
msgid "Neither left nor right-flanking:"
msgstr ""

#: ../../source/spec.rst:5641
msgid ""
"(The idea of distinguishing left-flanking and right-flanking delimiter "
"runs based on the character before and the character after comes from "
"Roopesh Chander's `vfmd <http://www.vfmd.org/vfmd-spec/specification"
"/#procedure-for-identifying-emphasis-tags>`__. vfmd uses the terminology "
"\"emphasis indicator string\" instead of \"delimiter run,\" and its rules"
" for distinguishing left- and right-flanking runs are a bit more complex "
"than the ones given here.)"
msgstr ""

#: ../../source/spec.rst:5649
msgid "The following rules define emphasis and strong emphasis:"
msgstr ""

#: ../../source/spec.rst:5651
msgid ""
"A single ``*`` character `can open emphasis <@>`__ iff (if and only if) "
"it is part of a [left-flanking delimiter run]."
msgstr ""

#: ../../source/spec.rst:5654
msgid ""
"A single ``_`` character [can open emphasis] iff it is part of a [left-"
"flanking delimiter run] and either (a) not part of a [right-flanking "
"delimiter run] or (b) part of a [right-flanking delimiter run] preceded "
"by punctuation."
msgstr ""

#: ../../source/spec.rst:5659
msgid ""
"A single ``*`` character `can close emphasis <@>`__ iff it is part of a "
"[right-flanking delimiter run]."
msgstr ""

#: ../../source/spec.rst:5662
msgid ""
"A single ``_`` character [can close emphasis] iff it is part of a [right-"
"flanking delimiter run] and either (a) not part of a [left-flanking "
"delimiter run] or (b) part of a [left-flanking delimiter run] followed by"
" punctuation."
msgstr ""

#: ../../source/spec.rst:5667
msgid ""
"A double ``**`` `can open strong emphasis <@>`__ iff it is part of a "
"[left-flanking delimiter run]."
msgstr ""

#: ../../source/spec.rst:5670
msgid ""
"A double ``__`` [can open strong emphasis] iff it is part of a [left-"
"flanking delimiter run] and either (a) not part of a [right-flanking "
"delimiter run] or (b) part of a [right-flanking delimiter run] preceded "
"by punctuation."
msgstr ""

#: ../../source/spec.rst:5675
msgid ""
"A double ``**`` `can close strong emphasis <@>`__ iff it is part of a "
"[right-flanking delimiter run]."
msgstr ""

#: ../../source/spec.rst:5678
msgid ""
"A double ``__`` [can close strong emphasis] iff it is part of a [right-"
"flanking delimiter run] and either (a) not part of a [left-flanking "
"delimiter run] or (b) part of a [left-flanking delimiter run] followed by"
" punctuation."
msgstr ""

#: ../../source/spec.rst:5683
msgid ""
"Emphasis begins with a delimiter that [can open emphasis] and ends with a"
" delimiter that [can close emphasis], and that uses the same character "
"(``_`` or ``*``) as the opening delimiter. The opening and closing "
"delimiters must belong to separate [delimiter runs]. If one of the "
"delimiters can both open and close emphasis, then the sum of the lengths "
"of the delimiter runs containing the opening and closing delimiters must "
"not be a multiple of 3."
msgstr ""

#: ../../source/spec.rst:5691
msgid ""
"Strong emphasis begins with a delimiter that [can open strong emphasis] "
"and ends with a delimiter that [can close strong emphasis], and that uses"
" the same character (``_`` or ``*``) as the opening delimiter. The "
"opening and closing delimiters must belong to separate [delimiter runs]. "
"If one of the delimiters can both open and close strong emphasis, then "
"the sum of the lengths of the delimiter runs containing the opening and "
"closing delimiters must not be a multiple of 3."
msgstr ""

#: ../../source/spec.rst:5700
msgid ""
"A literal ``*`` character cannot occur at the beginning or end of "
"``*``-delimited emphasis or ``**``-delimited strong emphasis, unless it "
"is backslash-escaped."
msgstr ""

#: ../../source/spec.rst:5704
msgid ""
"A literal ``_`` character cannot occur at the beginning or end of "
"``_``-delimited emphasis or ``__``-delimited strong emphasis, unless it "
"is backslash-escaped."
msgstr ""

#: ../../source/spec.rst:5708
msgid ""
"Where rules 1--12 above are compatible with multiple parsings, the "
"following principles resolve ambiguity:"
msgstr ""

#: ../../source/spec.rst:5711
msgid ""
"The number of nestings should be minimized. Thus, for example, an "
"interpretation ``<strong>...</strong>`` is always preferred to "
"``<em><em>...</em></em>``."
msgstr ""

#: ../../source/spec.rst:5715
msgid ""
"An interpretation ``<em><strong>...</strong></em>`` is always preferred "
"to ``<strong><em>...</em></strong>``."
msgstr ""

#: ../../source/spec.rst:5718
msgid ""
"When two potential emphasis or strong emphasis spans overlap, so that the"
" second begins before the first ends and ends after the first ends, the "
"first takes precedence. Thus, for example, ``*foo _bar* baz_`` is parsed "
"as ``<em>foo _bar</em> baz_`` rather than ``*foo <em>bar* baz</em>``."
msgstr ""

#: ../../source/spec.rst:5724
msgid ""
"When there are two potential emphasis or strong emphasis spans with the "
"same closing delimiter, the shorter one (the one that opens later) takes "
"precedence. Thus, for example, ``**foo **bar baz**`` is parsed as ``**foo"
" <strong>bar baz</strong>`` rather than ``<strong>foo **bar "
"baz</strong>``."
msgstr ""

#: ../../source/spec.rst:5730
msgid ""
"Inline code spans, links, images, and HTML tags group more tightly than "
"emphasis. So, when there is a choice between an interpretation that "
"contains one of these elements and one that does not, the former always "
"wins. Thus, for example, ``*[foo*](bar)`` is parsed as ``*<a "
"href=\"bar\">foo*</a>`` rather than as ``<em>[foo</em>](bar)``."
msgstr ""

#: ../../source/spec.rst:5736
msgid "These rules can be illustrated through a series of examples."
msgstr ""

#: ../../source/spec.rst:5738
msgid "Rule 1:"
msgstr ""

#: ../../source/spec.rst:5746
msgid ""
"This is not emphasis, because the opening ``*`` is followed by "
"whitespace, and hence not part of a [left-flanking delimiter run]:"
msgstr ""

#: ../../source/spec.rst:5755
msgid ""
"This is not emphasis, because the opening ``*`` is preceded by an "
"alphanumeric and followed by punctuation, and hence not part of a [left-"
"flanking delimiter run]:"
msgstr ""

#: ../../source/spec.rst:5765
msgid "Unicode nonbreaking spaces count as whitespace, too:"
msgstr ""

#: ../../source/spec.rst:5773
msgid "Intraword emphasis with ``*`` is permitted:"
msgstr ""

#: ../../source/spec.rst:5787
msgid "Rule 2:"
msgstr ""

#: ../../source/spec.rst:5795
msgid "This is not emphasis, because the opening ``_`` is followed by whitespace:"
msgstr ""

#: ../../source/spec.rst:5804
msgid ""
"This is not emphasis, because the opening ``_`` is preceded by an "
"alphanumeric and followed by punctuation:"
msgstr ""

#: ../../source/spec.rst:5813
msgid "Emphasis with ``_`` is not allowed inside words:"
msgstr ""

#: ../../source/spec.rst:5833
msgid ""
"Here ``_`` does not generate emphasis, because the first delimiter run is"
" right-flanking and the second left-flanking:"
msgstr ""

#: ../../source/spec.rst:5842
msgid ""
"This is emphasis, even though the opening delimiter is both left- and "
"right-flanking, because it is preceded by punctuation:"
msgstr ""

#: ../../source/spec.rst:5851
msgid "Rule 3:"
msgstr ""

#: ../../source/spec.rst:5853
msgid ""
"This is not emphasis, because the closing delimiter does not match the "
"opening delimiter:"
msgstr ""

#: ../../source/spec.rst:5862
msgid "This is not emphasis, because the closing ``*`` is preceded by whitespace:"
msgstr ""

#: ../../source/spec.rst:5871
msgid "A newline also counts as whitespace:"
msgstr ""

#: ../../source/spec.rst:5881
msgid ""
"This is not emphasis, because the second ``*`` is preceded by punctuation"
" and followed by an alphanumeric (hence it is not part of a [right-"
"flanking delimiter run]:"
msgstr ""

#: ../../source/spec.rst:5891 ../../source/spec.rst:6145
msgid ""
"The point of this restriction is more easily appreciated with this "
"example:"
msgstr ""

#: ../../source/spec.rst:5900
msgid "Intraword emphasis with ``*`` is allowed:"
msgstr ""

#: ../../source/spec.rst:5908
msgid "Rule 4:"
msgstr ""

#: ../../source/spec.rst:5910
msgid "This is not emphasis, because the closing ``_`` is preceded by whitespace:"
msgstr ""

#: ../../source/spec.rst:5919
msgid ""
"This is not emphasis, because the second ``_`` is preceded by punctuation"
" and followed by an alphanumeric:"
msgstr ""

#: ../../source/spec.rst:5928
msgid "This is emphasis within emphasis:"
msgstr ""

#: ../../source/spec.rst:5936
msgid "Intraword emphasis is disallowed for ``_``:"
msgstr ""

#: ../../source/spec.rst:5956
msgid ""
"This is emphasis, even though the closing delimiter is both left- and "
"right-flanking, because it is followed by punctuation:"
msgstr ""

#: ../../source/spec.rst:5965
msgid "Rule 5:"
msgstr ""

#: ../../source/spec.rst:5973 ../../source/spec.rst:6008
msgid ""
"This is not strong emphasis, because the opening delimiter is followed by"
" whitespace:"
msgstr ""

#: ../../source/spec.rst:5982
msgid ""
"This is not strong emphasis, because the opening ``**`` is preceded by an"
" alphanumeric and followed by punctuation, and hence not part of a [left-"
"flanking delimiter run]:"
msgstr ""

#: ../../source/spec.rst:5992
msgid "Intraword strong emphasis with ``**`` is permitted:"
msgstr ""

#: ../../source/spec.rst:6000
msgid "Rule 6:"
msgstr ""

#: ../../source/spec.rst:6017
msgid "A newline counts as whitespace:"
msgstr ""

#: ../../source/spec.rst:6027
msgid ""
"This is not strong emphasis, because the opening ``__`` is preceded by an"
" alphanumeric and followed by punctuation:"
msgstr ""

#: ../../source/spec.rst:6036 ../../source/spec.rst:6154
msgid "Intraword strong emphasis is forbidden with ``__``:"
msgstr ""

#: ../../source/spec.rst:6062
msgid ""
"This is strong emphasis, even though the opening delimiter is both left- "
"and right-flanking, because it is preceded by punctuation:"
msgstr ""

#: ../../source/spec.rst:6071
msgid "Rule 7:"
msgstr ""

#: ../../source/spec.rst:6073 ../../source/spec.rst:6127
msgid ""
"This is not strong emphasis, because the closing delimiter is preceded by"
" whitespace:"
msgstr ""

#: ../../source/spec.rst:6082
msgid ""
"(Nor can it be interpreted as an emphasized ``*foo bar *``, because of "
"Rule 11.)"
msgstr ""

#: ../../source/spec.rst:6085
msgid ""
"This is not strong emphasis, because the second ``**`` is preceded by "
"punctuation and followed by an alphanumeric:"
msgstr ""

#: ../../source/spec.rst:6094
msgid ""
"The point of this restriction is more easily appreciated with these "
"examples:"
msgstr ""

#: ../../source/spec.rst:6117
msgid "Intraword emphasis:"
msgstr ""

#: ../../source/spec.rst:6125
msgid "Rule 8:"
msgstr ""

#: ../../source/spec.rst:6136
msgid ""
"This is not strong emphasis, because the second ``__`` is preceded by "
"punctuation and followed by an alphanumeric:"
msgstr ""

#: ../../source/spec.rst:6174
msgid ""
"This is strong emphasis, even though the closing delimiter is both left- "
"and right-flanking, because it is followed by punctuation:"
msgstr ""

#: ../../source/spec.rst:6183
msgid "Rule 9:"
msgstr ""

#: ../../source/spec.rst:6185
msgid ""
"Any nonempty sequence of inline elements can be the contents of an "
"emphasized span."
msgstr ""

#: ../../source/spec.rst:6202
msgid "In particular, emphasis and strong emphasis can be nested inside emphasis:"
msgstr ""

#: ../../source/spec.rst:6241
msgid "Note that in the preceding case, the interpretation"
msgstr ""

#: ../../source/spec.rst:6247
msgid ""
"is precluded by the condition that a delimiter that can both open and "
"close (like the ``*`` after ``foo``) cannot form emphasis if the sum of "
"the lengths of the delimiter runs containing the opening and closing "
"delimiters is a multiple of 3."
msgstr ""

#: ../../source/spec.rst:6252
msgid ""
"For the same reason, we don't get two consecutive emphasis sections in "
"this example:"
msgstr ""

#: ../../source/spec.rst:6261
msgid ""
"The same condition ensures that the following cases are all strong "
"emphasis nested inside emphasis, even when the interior spaces are "
"omitted:"
msgstr ""

#: ../../source/spec.rst:6283 ../../source/spec.rst:6381
msgid "Indefinite levels of nesting are possible:"
msgstr ""

#: ../../source/spec.rst:6297 ../../source/spec.rst:6397
msgid "There can be no empty emphasis or strong emphasis:"
msgstr ""

#: ../../source/spec.rst:6311
msgid "Rule 10:"
msgstr ""

#: ../../source/spec.rst:6313
msgid ""
"Any nonempty sequence of inline elements can be the contents of an "
"strongly emphasized span."
msgstr ""

#: ../../source/spec.rst:6330
msgid ""
"In particular, emphasis and strong emphasis can be nested inside strong "
"emphasis:"
msgstr ""

#: ../../source/spec.rst:6411
msgid "Rule 11:"
msgstr ""

#: ../../source/spec.rst:6449
msgid ""
"Note that when delimiters do not match evenly, Rule 11 determines that "
"the excess literal ``*`` characters will appear outside of the emphasis, "
"rather than inside it:"
msgstr ""

#: ../../source/spec.rst:6489
msgid "Rule 12:"
msgstr ""

#: ../../source/spec.rst:6533
msgid ""
"Note that when delimiters do not match evenly, Rule 12 determines that "
"the excess literal ``_`` characters will appear outside of the emphasis, "
"rather than inside it:"
msgstr ""

#: ../../source/spec.rst:6567
msgid ""
"Rule 13 implies that if you want emphasis nested directly inside "
"emphasis, you must use different delimiters:"
msgstr ""

#: ../../source/spec.rst:6594
msgid ""
"However, strong emphasis within strong emphasis is possible without "
"switching delimiters:"
msgstr ""

#: ../../source/spec.rst:6609
msgid "Rule 13 can be applied to arbitrarily long sequences of delimiters:"
msgstr ""

#: ../../source/spec.rst:6617
msgid "Rule 14:"
msgstr ""

#: ../../source/spec.rst:6631
msgid "Rule 15:"
msgstr ""

#: ../../source/spec.rst:6645
msgid "Rule 16:"
msgstr ""

#: ../../source/spec.rst:6659
msgid "Rule 17:"
msgstr ""

#: ../../source/spec.rst:6716
msgid "Links"
msgstr ""

#: ../../source/spec.rst:6718
msgid ""
"A link contains [link text] (the visible text), a [link destination] (the"
" URI that is the link destination), and optionally a [link title]. There "
"are two basic kinds of links in Markdown. In [inline links] the "
"destination and title are given immediately after the link text. In "
"[reference links] the destination and title are defined elsewhere in the "
"document."
msgstr ""

#: ../../source/spec.rst:6725
msgid ""
"A `link text <@>`__ consists of a sequence of zero or more inline "
"elements enclosed by square brackets (``[`` and ``]``). The following "
"rules apply:"
msgstr ""

#: ../../source/spec.rst:6729
msgid ""
"Links may not contain other links, at any level of nesting. If multiple "
"otherwise valid link definitions appear nested inside each other, the "
"inner-most definition is used."
msgstr ""

#: ../../source/spec.rst:6733
msgid ""
"Brackets are allowed in the [link text] only if (a) they are backslash-"
"escaped or (b) they appear as a matched pair of brackets, with an open "
"bracket ``[``, a sequence of zero or more inlines, and a close bracket "
"``]``."
msgstr ""

#: ../../source/spec.rst:6738
msgid ""
"Backtick [code spans], [autolinks], and raw [HTML tags] bind more tightly"
" than the brackets in link text. Thus, for example, :literal:`[foo`]\\`` "
"could not be a link text, since the second ``]`` is part of a code span."
msgstr ""

#: ../../source/spec.rst:6743
msgid ""
"The brackets in link text bind more tightly than markers for [emphasis "
"and strong emphasis]. Thus, for example, ``*[foo*](url)`` is a link."
msgstr ""

#: ../../source/spec.rst:6747
msgid "A `link destination <@>`__ consists of either"
msgstr ""

#: ../../source/spec.rst:6749
msgid ""
"a sequence of zero or more characters between an opening ``<`` and a "
"closing ``>`` that contains no line breaks or unescaped ``<`` or ``>`` "
"characters, or"
msgstr ""

#: ../../source/spec.rst:6753
msgid ""
"a nonempty sequence of characters that does not include ASCII space or "
"control characters, and includes parentheses only if (a) they are "
"backslash-escaped or (b) they are part of a balanced pair of unescaped "
"parentheses. (Implementations may impose limits on parentheses nesting to"
" avoid performance issues, but at least three levels of nesting should be"
" supported.)"
msgstr ""

#: ../../source/spec.rst:6760
msgid "A `link title <@>`__ consists of either"
msgstr ""

#: ../../source/spec.rst:6762
msgid ""
"a sequence of zero or more characters between straight double-quote "
"characters (``\"``), including a ``\"`` character only if it is "
"backslash-escaped, or"
msgstr ""

#: ../../source/spec.rst:6766
msgid ""
"a sequence of zero or more characters between straight single-quote "
"characters (``'``), including a ``'`` character only if it is backslash-"
"escaped, or"
msgstr ""

#: ../../source/spec.rst:6770
msgid ""
"a sequence of zero or more characters between matching parentheses "
"(``(...)``), including a ``)`` character only if it is backslash-escaped."
msgstr ""

#: ../../source/spec.rst:6774
msgid ""
"Although [link titles] may span multiple lines, they may not contain a "
"[blank line]."
msgstr ""

#: ../../source/spec.rst:6777
msgid ""
"An `inline link <@>`__ consists of a [link text] followed immediately by "
"a left parenthesis ``(``, optional [whitespace], an optional [link "
"destination], an optional [link title] separated from the link "
"destination by [whitespace], optional [whitespace], and a right "
"parenthesis ``)``. The link's text consists of the inlines contained in "
"the [link text] (excluding the enclosing square brackets). The link's URI"
" consists of the link destination, excluding enclosing ``<...>`` if "
"present, with backslash-escapes in effect as described above. The link's "
"title consists of the link title, excluding its enclosing delimiters, "
"with backslash-escapes in effect as described above."
msgstr ""

#: ../../source/spec.rst:6788
msgid "Here is a simple inline link:"
msgstr ""

#: ../../source/spec.rst:6804
msgid "Both the title and the destination may be omitted:"
msgstr ""

#: ../../source/spec.rst:6818
msgid ""
"The destination can only contain spaces if it is enclosed in pointy "
"brackets:"
msgstr ""

#: ../../source/spec.rst:6833
msgid ""
"The destination cannot contain line breaks, even if enclosed in pointy "
"brackets:"
msgstr ""

#: ../../source/spec.rst:6852
msgid "Parentheses inside the link destination may be escaped:"
msgstr ""

#: ../../source/spec.rst:6860
msgid ""
"Any number of parentheses are allowed without escaping, as long as they "
"are balanced:"
msgstr ""

#: ../../source/spec.rst:6869
msgid ""
"However, if you have unbalanced parentheses, you need to escape or use "
"the ``<...>`` form:"
msgstr ""

#: ../../source/spec.rst:6884
msgid "Parentheses and other symbols can also be escaped, as usual in Markdown:"
msgstr ""

#: ../../source/spec.rst:6892
msgid "A link can contain fragment identifiers and queries:"
msgstr ""

#: ../../source/spec.rst:6906
msgid ""
"Note that a backslash before a non-escapable character is just a "
"backslash:"
msgstr ""

#: ../../source/spec.rst:6915
msgid ""
"URL-escaping should be left alone inside the destination, as all URL-"
"escaped characters are also valid URL characters. Entity and numerical "
"character references in the destination will be parsed into the "
"corresponding Unicode code points, as usual. These may be optionally URL-"
"escaped when written as HTML, but this spec does not enforce any "
"particular policy for rendering URLs in HTML or other formats. Renderers "
"may make different decisions about how to escape or normalize URLs in the"
" output."
msgstr ""

#: ../../source/spec.rst:6930
msgid ""
"Note that, because titles can often be parsed as destinations, if you try"
" to omit the destination and keep the title, you'll get unexpected "
"results:"
msgstr ""

#: ../../source/spec.rst:6940
msgid "Titles may be in single quotes, double quotes, or parentheses:"
msgstr ""

#: ../../source/spec.rst:6952
msgid ""
"Backslash escapes and entity and numeric character references may be used"
" in titles:"
msgstr ""

#: ../../source/spec.rst:6961
msgid ""
"Titles must be separated from the link using a [whitespace]. Other "
"[Unicode whitespace] like non-breaking space doesn't work."
msgstr ""

#: ../../source/spec.rst:6970
msgid "Nested balanced quotes are not allowed without escaping:"
msgstr ""

#: ../../source/spec.rst:6978
msgid "But it is easy to work around this by using a different quote type:"
msgstr ""

#: ../../source/spec.rst:6986
msgid ""
"(Note: ``Markdown.pl`` did allow double quotes inside a double-quoted "
"title, and its test suite included a test demonstrating this. But it is "
"hard to see a good rationale for the extra complexity this brings, since "
"there are already many ways---backslash escaping, entity and numeric "
"character references, or using a different quote type for the enclosing "
"title---to write titles containing double quotes. ``Markdown.pl``'s "
"handling of titles has a number of other strange features. For example, "
"it allows single-quoted titles in inline links, but not reference links. "
"And, in reference links but not inline links, it allows a title to begin "
"with ``\"`` and end with ``)``. ``Markdown.pl`` 1.0.1 even allows titles "
"with no closing quotation mark, though 1.0.2b8 does not. It seems "
"preferable to adopt a simple, rational rule that works the same way in "
"inline links and link reference definitions.)"
msgstr ""

#: ../../source/spec.rst:7000
msgid "[Whitespace] is allowed around the destination and title:"
msgstr ""

#: ../../source/spec.rst:7009
msgid "But it is not allowed between the link text and the following parenthesis:"
msgstr ""

#: ../../source/spec.rst:7018 ../../source/spec.rst:7163
msgid ""
"The link text may contain balanced brackets, but not unbalanced ones, "
"unless they are escaped:"
msgstr ""

#: ../../source/spec.rst:7045 ../../source/spec.rst:7182
msgid "The link text may contain inline content:"
msgstr ""

#: ../../source/spec.rst:7059 ../../source/spec.rst:7200
msgid "However, links may not contain other links, at any level of nesting."
msgstr ""

#: ../../source/spec.rst:7079
msgid ""
"These cases illustrate the precedence of link text grouping over emphasis"
" grouping:"
msgstr ""

#: ../../source/spec.rst:7094
msgid "Note that brackets that *aren't* part of links do not take precedence:"
msgstr ""

#: ../../source/spec.rst:7102 ../../source/spec.rst:7240
msgid ""
"These cases illustrate the precedence of HTML tags, code spans, and "
"autolinks over link grouping:"
msgstr ""

#: ../../source/spec.rst:7123
msgid ""
"There are three kinds of `reference link <@>`__\\ s: `full <#full-"
"reference-link>`__, `collapsed <#collapsed-reference-link>`__, and "
"`shortcut <#shortcut-reference-link>`__."
msgstr ""

#: ../../source/spec.rst:7128
msgid ""
"A `full reference link <@>`__ consists of a [link text] immediately "
"followed by a [link label] that [matches] a [link reference definition] "
"elsewhere in the document."
msgstr ""

#: ../../source/spec.rst:7132
msgid ""
"A `link label <@>`__ begins with a left bracket (``[``) and ends with the"
" first right bracket (``]``) that is not backslash-escaped. Between these"
" brackets there must be at least one [non-whitespace character]. "
"Unescaped square bracket characters are not allowed inside the opening "
"and closing square brackets of [link labels]. A link label can have at "
"most 999 characters inside the square brackets."
msgstr ""

#: ../../source/spec.rst:7139
msgid ""
"One label `matches <@>`__ another just in case their normalized forms are"
" equal. To normalize a label, strip off the opening and closing brackets,"
" perform the *Unicode case fold*, strip leading and trailing [whitespace]"
" and collapse consecutive internal [whitespace] to a single space. If "
"there are multiple matching reference link definitions, the one that "
"comes first in the document is used. (It is desirable in such cases to "
"emit a warning.)"
msgstr ""

#: ../../source/spec.rst:7147
msgid ""
"The contents of the first link label are parsed as inlines, which are "
"used as the link's text. The link's URI and title are provided by the "
"matching [link reference definition]."
msgstr ""

#: ../../source/spec.rst:7161
msgid "The rules for the [link text] are the same as with [inline links]. Thus:"
msgstr ""

#: ../../source/spec.rst:7218
msgid ""
"(In the examples above, we have two [shortcut reference links] instead of"
" one [full reference link].)"
msgstr ""

#: ../../source/spec.rst:7221
msgid ""
"The following cases illustrate the precedence of link text grouping over "
"emphasis grouping:"
msgstr ""

#: ../../source/spec.rst:7267
msgid "Matching is case-insensitive:"
msgstr ""

#: ../../source/spec.rst:7277
msgid "Unicode case fold is used:"
msgstr ""

#: ../../source/spec.rst:7287
msgid ""
"Consecutive internal [whitespace] is treated as one space for purposes of"
" determining matching:"
msgstr ""

#: ../../source/spec.rst:7299
msgid "No [whitespace] is allowed between the [link text] and the [link label]:"
msgstr ""

#: ../../source/spec.rst:7319
msgid ""
"This is a departure from John Gruber's original Markdown syntax "
"description, which explicitly allows whitespace between the link text and"
" the link label. It brings reference links in line with [inline links], "
"which (according to both original Markdown and this spec) cannot have "
"whitespace after the link text. More importantly, it prevents inadvertent"
" capture of consecutive [shortcut reference links]. If whitespace is "
"allowed between the link text and the link label, then in the following "
"we will have a single reference link, not two shortcut reference links, "
"as intended:"
msgstr ""

#: ../../source/spec.rst:7337
msgid ""
"(Note that [shortcut reference links] were introduced by Gruber himself "
"in a beta version of ``Markdown.pl``, but never included in the official "
"syntax description. Without shortcut reference links, it is harmless to "
"allow space between the link text and link label; but once shortcut "
"references are introduced, it is too dangerous to allow this, as it "
"frequently leads to unintended results.)"
msgstr ""

#: ../../source/spec.rst:7344
msgid ""
"When there are multiple matching [link reference definitions], the first "
"is used:"
msgstr ""

#: ../../source/spec.rst:7357
msgid ""
"Note that matching is performed on normalized strings, not parsed inline "
"content. So the following does not match, even though the labels define "
"equivalent inline content:"
msgstr ""

#: ../../source/spec.rst:7369
msgid "[Link labels] cannot contain brackets, unless they are backslash-escaped:"
msgstr ""

#: ../../source/spec.rst:7407
msgid "Note that in this example ``]`` is not backslash-escaped:"
msgstr ""

#: ../../source/spec.rst:7417
msgid "A [link label] must contain at least one [non-whitespace character]:"
msgstr ""

#: ../../source/spec.rst:7441
msgid ""
"A `collapsed reference link <@>`__ consists of a [link label] that "
"[matches] a [link reference definition] elsewhere in the document, "
"followed by the string ``[]``. The contents of the first link label are "
"parsed as inlines, which are used as the link's text. The link's URI and "
"title are provided by the matching reference link definition. Thus, "
"``[foo][]`` is equivalent to ``[foo][foo]``."
msgstr ""

#: ../../source/spec.rst:7464 ../../source/spec.rst:7526
#: ../../source/spec.rst:7813
msgid "The link labels are case-insensitive:"
msgstr ""

#: ../../source/spec.rst:7474
msgid ""
"As with full reference links, [whitespace] is not allowed between the two"
" sets of brackets:"
msgstr ""

#: ../../source/spec.rst:7487
msgid ""
"A `shortcut reference link <@>`__ consists of a [link label] that "
"[matches] a [link reference definition] elsewhere in the document and is "
"not followed by ``[]`` or a link label. The contents of the first link "
"label are parsed as inlines, which are used as the link's text. The "
"link's URI and title are provided by the matching link reference "
"definition. Thus, ``[foo]`` is equivalent to ``[foo][]``."
msgstr ""

#: ../../source/spec.rst:7536
msgid "A space after the link text should be preserved:"
msgstr ""

#: ../../source/spec.rst:7546
msgid ""
"If you just want bracketed text, you can backslash-escape the opening "
"bracket to avoid links:"
msgstr ""

#: ../../source/spec.rst:7557
msgid ""
"Note that this is a link, because a link label ends with the first "
"following closing bracket:"
msgstr ""

#: ../../source/spec.rst:7568
msgid "Full and compact references take precedence over shortcut references:"
msgstr ""

#: ../../source/spec.rst:7587
msgid "Inline links also take precedence:"
msgstr ""

#: ../../source/spec.rst:7605
msgid ""
"In the following case ``[bar][baz]`` is parsed as a reference, ``[foo]`` "
"as normal text:"
msgstr ""

#: ../../source/spec.rst:7616
msgid ""
"Here, though, ``[foo][bar]`` is parsed as a reference, since ``[bar]`` is"
" defined:"
msgstr ""

#: ../../source/spec.rst:7628
msgid ""
"Here ``[foo]`` is not parsed as a shortcut reference, because it is "
"followed by a link label (even though ``[bar]`` is not defined):"
msgstr ""

#: ../../source/spec.rst:7641
msgid "Images"
msgstr ""

#: ../../source/spec.rst:7643
msgid ""
"Syntax for images is like the syntax for links, with one difference. "
"Instead of [link text], we have an `image description <@>`__. The rules "
"for this are the same as for [link text], except that (a) an image "
"description starts with ``![`` rather than ``[``, and"
msgstr ""

#: ../../source/spec.rst:7648
msgid ""
"(b) an image description may contain links. An image description has "
"inline elements as its contents. When an image is rendered to HTML, this "
"is standardly used as the image's ``alt`` attribute."
msgstr ""

#: ../../source/spec.rst:7678
msgid ""
"Though this spec is concerned with parsing, not rendering, it is "
"recommended that in rendering to HTML, only the plain string content of "
"the [image description] be used. Note that in the above example, the alt "
"attribute's value is ``foo bar``, not ``foo [bar](/url)`` or ``foo <a "
"href=\"/url\">bar</a>``. Only the plain string content is rendered, "
"without formatting."
msgstr ""

#: ../../source/spec.rst:7725
msgid "Reference-style:"
msgstr ""

#: ../../source/spec.rst:7743
msgid "Collapsed:"
msgstr ""

#: ../../source/spec.rst:7761
msgid "The labels are case-insensitive:"
msgstr ""

#: ../../source/spec.rst:7771
msgid ""
"As with reference links, [whitespace] is not allowed between the two sets"
" of brackets:"
msgstr ""

#: ../../source/spec.rst:7784
msgid "Shortcut:"
msgstr ""

#: ../../source/spec.rst:7802
msgid "Note that link labels cannot contain unescaped brackets:"
msgstr ""

#: ../../source/spec.rst:7823
msgid ""
"If you just want a literal ``!`` followed by bracketed text, you can "
"backslash-escape the opening ``[``:"
msgstr ""

#: ../../source/spec.rst:7834
msgid "If you want a link after a literal ``!``, backslash-escape the ``!``:"
msgstr ""

#: ../../source/spec.rst:7845
msgid "Autolinks"
msgstr ""

#: ../../source/spec.rst:7847
msgid ""
"`Autolink <@>`__\\ s are absolute URIs and email addresses inside ``<`` "
"and ``>``. They are parsed as links, with the URL or email address as the"
" link label."
msgstr ""

#: ../../source/spec.rst:7851
msgid ""
"A `URI autolink <@>`__ consists of ``<``, followed by an [absolute URI] "
"not containing ``<``, followed by ``>``. It is parsed as a link to the "
"URI, with the URI as the link's label."
msgstr ""

#: ../../source/spec.rst:7855
msgid ""
"An `absolute URI <@>`__, for these purposes, consists of a [scheme] "
"followed by a colon (``:``) followed by zero or more characters other "
"than ASCII [whitespace] and control characters, ``<``, and ``>``. If the "
"URI includes these characters, they must be percent-encoded (e.g. ``%20``"
" for a space)."
msgstr ""

#: ../../source/spec.rst:7861
msgid ""
"For purposes of this spec, a `scheme <@>`__ is any sequence of 2--32 "
"characters beginning with an ASCII letter and followed by any combination"
" of ASCII letters, digits, or the symbols plus (\"+\"), period (\".\"), "
"or hyphen (\"-\")."
msgstr ""

#: ../../source/spec.rst:7866
msgid "Here are some valid autolinks:"
msgstr ""

#: ../../source/spec.rst:7886
msgid "Uppercase is also fine:"
msgstr ""

#: ../../source/spec.rst:7894
msgid ""
"Note that many strings that count as [absolute URIs] for purposes of this"
" spec are not valid URIs, because their schemes are not registered or "
"because of other problems with their syntax:"
msgstr ""

#: ../../source/spec.rst:7922
msgid "Spaces are not allowed in autolinks:"
msgstr ""

#: ../../source/spec.rst:7930
msgid "Backslash-escapes do not work inside autolinks:"
msgstr ""

#: ../../source/spec.rst:7938
msgid ""
"An `email autolink <@>`__ consists of ``<``, followed by an [email "
"address], followed by ``>``. The link's label is the email address, and "
"the URL is ``mailto:`` followed by the email address."
msgstr ""

#: ../../source/spec.rst:7942
msgid ""
"An `email address <@>`__, for these purposes, is anything that matches "
"the `non-normative regex from the HTML5 spec "
"<https://html.spec.whatwg.org/multipage/forms.html#e-mail-"
"state-(type=email)>`__:"
msgstr ""

#: ../../source/spec.rst:7951
msgid "Examples of email autolinks:"
msgstr ""

#: ../../source/spec.rst:7965
msgid "Backslash-escapes do not work inside email autolinks:"
msgstr ""

#: ../../source/spec.rst:7973
msgid "These are not autolinks:"
msgstr ""

#: ../../source/spec.rst:8012
msgid "Raw HTML"
msgstr ""

#: ../../source/spec.rst:8014
msgid ""
"Text between ``<`` and ``>`` that looks like an HTML tag is parsed as a "
"raw HTML tag and will be rendered in HTML without escaping. Tag and "
"attribute names are not limited to current HTML tags, so custom tags (and"
" even, say, DocBook tags) may be used."
msgstr ""

#: ../../source/spec.rst:8019
msgid "Here is the grammar for tags:"
msgstr ""

#: ../../source/spec.rst:8021
msgid ""
"A `tag name <@>`__ consists of an ASCII letter followed by zero or more "
"ASCII letters, digits, or hyphens (``-``)."
msgstr ""

#: ../../source/spec.rst:8024
msgid ""
"An `attribute <@>`__ consists of [whitespace], an [attribute name], and "
"an optional [attribute value specification]."
msgstr ""

#: ../../source/spec.rst:8027
msgid ""
"An `attribute name <@>`__ consists of an ASCII letter, ``_``, or ``:``, "
"followed by zero or more ASCII letters, digits, ``_``, ``.``, ``:``, or "
"``-``. (Note: This is the XML specification restricted to ASCII. HTML5 is"
" laxer.)"
msgstr ""

#: ../../source/spec.rst:8032
msgid ""
"An `attribute value specification <@>`__ consists of optional "
"[whitespace], a ``=`` character, optional [whitespace], and an [attribute"
" value]."
msgstr ""

#: ../../source/spec.rst:8036
msgid ""
"An `attribute value <@>`__ consists of an [unquoted attribute value], a "
"[single-quoted attribute value], or a [double-quoted attribute value]."
msgstr ""

#: ../../source/spec.rst:8039
msgid ""
"An `unquoted attribute value <@>`__ is a nonempty string of characters "
"not including [whitespace], ``\"``, ``'``, ``=``, ``<``, ``>``, or "
":literal:`\\``."
msgstr ""

#: ../../source/spec.rst:8043
msgid ""
"A `single-quoted attribute value <@>`__ consists of ``'``, zero or more "
"characters not including ``'``, and a final ``'``."
msgstr ""

#: ../../source/spec.rst:8046
msgid ""
"A `double-quoted attribute value <@>`__ consists of ``\"``, zero or more "
"characters not including ``\"``, and a final ``\"``."
msgstr ""

#: ../../source/spec.rst:8049
msgid ""
"An `open tag <@>`__ consists of a ``<`` character, a [tag name], zero or "
"more [attributes], optional [whitespace], an optional ``/`` character, "
"and a ``>`` character."
msgstr ""

#: ../../source/spec.rst:8053
msgid ""
"A `closing tag <@>`__ consists of the string ``</``, a [tag name], "
"optional [whitespace], and the character ``>``."
msgstr ""

#: ../../source/spec.rst:8056
msgid ""
"An `HTML comment <@>`__ consists of ``<!--`` + *text* + ``-->``, where "
"*text* does not start with ``>`` or ``->``, does not end with ``-``, and "
"does not contain ``--``. (See the `HTML5 spec "
"<http://www.w3.org/TR/html5/syntax.html#comments>`__.)"
msgstr ""

#: ../../source/spec.rst:8061
msgid ""
"A `processing instruction <@>`__ consists of the string ``<?``, a string "
"of characters not including the string ``?>``, and the string ``?>``."
msgstr ""

#: ../../source/spec.rst:8064
msgid ""
"A `declaration <@>`__ consists of the string ``<!``, a name consisting of"
" one or more uppercase ASCII letters, [whitespace], a string of "
"characters not including the character ``>``, and the character ``>``."
msgstr ""

#: ../../source/spec.rst:8068
msgid ""
"A `CDATA section <@>`__ consists of the string ``<![CDATA[``, a string of"
" characters not including the string ``]]>``, and the string ``]]>``."
msgstr ""

#: ../../source/spec.rst:8071
msgid ""
"An `HTML tag <@>`__ consists of an [open tag], a [closing tag], an [HTML "
"comment], a [processing instruction], a [declaration], or a [CDATA "
"section]."
msgstr ""

#: ../../source/spec.rst:8075
msgid "Here are some simple open tags:"
msgstr ""

#: ../../source/spec.rst:8083
msgid "Empty elements:"
msgstr ""

#: ../../source/spec.rst:8091
msgid "[Whitespace] is allowed:"
msgstr ""

#: ../../source/spec.rst:8101
msgid "With attributes:"
msgstr ""

#: ../../source/spec.rst:8111
msgid "Custom tag names can be used:"
msgstr ""

#: ../../source/spec.rst:8119
msgid "Illegal tag names, not parsed as HTML:"
msgstr ""

#: ../../source/spec.rst:8127
msgid "Illegal attribute names:"
msgstr ""

#: ../../source/spec.rst:8135
msgid "Illegal attribute values:"
msgstr ""

#: ../../source/spec.rst:8143
msgid "Illegal [whitespace]:"
msgstr ""

#: ../../source/spec.rst:8157
msgid "Missing [whitespace]:"
msgstr ""

#: ../../source/spec.rst:8165
msgid "Closing tags:"
msgstr ""

#: ../../source/spec.rst:8173
msgid "Illegal attributes in closing tag:"
msgstr ""

#: ../../source/spec.rst:8181
msgid "Comments:"
msgstr ""

#: ../../source/spec.rst:8197
msgid "Not comments:"
msgstr ""

#: ../../source/spec.rst:8208
msgid "Processing instructions:"
msgstr ""

#: ../../source/spec.rst:8216
msgid "Declarations:"
msgstr ""

#: ../../source/spec.rst:8224
msgid "CDATA sections:"
msgstr ""

#: ../../source/spec.rst:8232
msgid "Entity and numeric character references are preserved in HTML attributes:"
msgstr ""

#: ../../source/spec.rst:8241
msgid "Backslash escapes do not work in HTML attributes:"
msgstr ""

#: ../../source/spec.rst:8256
msgid "Hard line breaks"
msgstr ""

#: ../../source/spec.rst:8258
msgid ""
"A line break (not in a code span or HTML tag) that is preceded by two or "
"more spaces and does not occur at the end of a block is parsed as a `hard"
" line break <@>`__ (rendered in HTML as a ``<br />`` tag):"
msgstr ""

#: ../../source/spec.rst:8270
msgid ""
"For a more visible alternative, a backslash before the [line ending] may "
"be used instead of two spaces:"
msgstr ""

#: ../../source/spec.rst:8281
msgid "More than two spaces can be used:"
msgstr ""

#: ../../source/spec.rst:8291
msgid "Leading spaces at the beginning of the next line are ignored:"
msgstr ""

#: ../../source/spec.rst:8309
msgid ""
"Line breaks can occur inside emphasis, links, and other constructs that "
"allow inline content:"
msgstr ""

#: ../../source/spec.rst:8328
msgid "Line breaks do not occur inside code spans"
msgstr ""

#: ../../source/spec.rst:8344
msgid "or HTML tags:"
msgstr ""

#: ../../source/spec.rst:8362
msgid ""
"Hard line breaks are for separating inline content within a block. "
"Neither syntax for hard line breaks works at the end of a paragraph or "
"other block element:"
msgstr ""

#: ../../source/spec.rst:8391
msgid "Soft line breaks"
msgstr ""

#: ../../source/spec.rst:8393
msgid ""
"A regular line break (not in a code span or HTML tag) that is not "
"preceded by two or more spaces or a backslash is parsed as a `softbreak "
"<@>`__. (A softbreak may be rendered in HTML either as a [line ending] or"
" as a space. The result will be the same in browsers. In the examples "
"here, a [line ending] will be used.)"
msgstr ""

#: ../../source/spec.rst:8407
msgid "Spaces at the end of the line and beginning of the next line are removed:"
msgstr ""

#: ../../source/spec.rst:8418
msgid ""
"A conforming parser may render a soft line break in HTML either as a line"
" break or as a space."
msgstr ""

#: ../../source/spec.rst:8421
msgid ""
"A renderer may also provide an option to render soft line breaks as hard "
"line breaks."
msgstr ""

#: ../../source/spec.rst:8425
msgid "Textual content"
msgstr ""

#: ../../source/spec.rst:8427
msgid ""
"Any characters not given an interpretation by the above rules will be "
"parsed as plain textual content."
msgstr ""

#: ../../source/spec.rst:8442
msgid "Internal spaces are preserved verbatim:"
msgstr ""

#: ../../source/spec.rst:8455
msgid "Appendix: A parsing strategy"
msgstr ""

#: ../../source/spec.rst:8457
msgid ""
"In this appendix we describe some features of the parsing strategy used "
"in the CommonMark reference implementations."
msgstr ""

#: ../../source/spec.rst:8461
msgid "Overview"
msgstr ""

#: ../../source/spec.rst:8463
msgid "Parsing has two phases:"
msgstr ""

#: ../../source/spec.rst:8465
msgid ""
"In the first phase, lines of input are consumed and the block structure "
"of the document---its division into paragraphs, block quotes, list items,"
" and so on---is constructed. Text is assigned to these blocks but not "
"parsed. Link reference definitions are parsed and a map of links is "
"constructed."
msgstr ""

#: ../../source/spec.rst:8471
msgid ""
"In the second phase, the raw text contents of paragraphs and headings are"
" parsed into sequences of Markdown inline elements (strings, code spans, "
"links, emphasis, and so on), using the map of link references constructed"
" in phase 1."
msgstr ""

#: ../../source/spec.rst:8476
msgid ""
"At each point in processing, the document is represented as a tree of "
"**blocks**. The root of the tree is a ``document`` block. The "
"``document`` may have any number of other blocks as **children**. These "
"children may, in turn, have other blocks as children. The last child of a"
" block is normally considered **open**, meaning that subsequent lines of "
"input can alter its contents. (Blocks that are not open are **closed**.) "
"Here, for example, is a possible document tree, with the open blocks "
"marked by arrows:"
msgstr ""

#: ../../source/spec.rst:8500
msgid "Phase 1: block structure"
msgstr ""

#: ../../source/spec.rst:8502
msgid ""
"Each line that is processed has an effect on this tree. The line is "
"analyzed and, depending on its contents, the document may be altered in "
"one or more of the following ways:"
msgstr ""

#: ../../source/spec.rst:8506
msgid "One or more open blocks may be closed."
msgstr ""

#: ../../source/spec.rst:8507
msgid "One or more new blocks may be created as children of the last open block."
msgstr ""

#: ../../source/spec.rst:8509
msgid "Text may be added to the last (deepest) open block remaining on the tree."
msgstr ""

#: ../../source/spec.rst:8512
msgid ""
"Once a line has been incorporated into the tree in this way, it can be "
"discarded, so input can be read in a stream."
msgstr ""

#: ../../source/spec.rst:8515
msgid "For each line, we follow this procedure:"
msgstr ""

#: ../../source/spec.rst:8517
msgid ""
"First we iterate through the open blocks, starting with the root "
"document, and descending through last children down to the last open "
"block. Each block imposes a condition that the line must satisfy if the "
"block is to remain open. For example, a block quote requires a ``>`` "
"character. A paragraph requires a non-blank line. In this phase we may "
"match all or just some of the open blocks. But we cannot close unmatched "
"blocks yet, because we may have a [lazy continuation line]."
msgstr ""

#: ../../source/spec.rst:8525
msgid ""
"Next, after consuming the continuation markers for existing blocks, we "
"look for new block starts (e.g. ``>`` for a block quote). If we encounter"
" a new block start, we close any blocks unmatched in step 1 before "
"creating the new block as a child of the last matched block."
msgstr ""

#: ../../source/spec.rst:8530
msgid ""
"Finally, we look at the remainder of the line (after block markers like "
"``>``, list markers, and indentation have been consumed). This is text "
"that can be incorporated into the last open block (a paragraph, code "
"block, heading, or raw HTML)."
msgstr ""

#: ../../source/spec.rst:8535
msgid ""
"Setext headings are formed when we see a line of a paragraph that is a "
"[setext heading underline]."
msgstr ""

#: ../../source/spec.rst:8538
msgid ""
"Reference link definitions are detected when a paragraph is closed; the "
"accumulated text lines are parsed to see if they begin with one or more "
"reference link definitions. Any remainder becomes a normal paragraph."
msgstr ""

#: ../../source/spec.rst:8542
msgid ""
"We can see how this works by considering how the tree above is generated "
"by four lines of Markdown:"
msgstr ""

#: ../../source/spec.rst:8552
msgid "At the outset, our document model is just"
msgstr ""

#: ../../source/spec.rst:8558
msgid "The first line of our text,"
msgstr ""

#: ../../source/spec.rst:8564
msgid ""
"causes a ``block_quote`` block to be created as a child of our open "
"``document`` block, and a ``paragraph`` block as a child of the "
"``block_quote``. Then the text is added to the last open block, the "
"``paragraph``:"
msgstr ""

#: ../../source/spec.rst:8576
msgid "The next line,"
msgstr ""

#: ../../source/spec.rst:8582
msgid ""
"is a \"lazy continuation\" of the open ``paragraph``, so it gets added to"
" the paragraph's text:"
msgstr ""

#: ../../source/spec.rst:8592
msgid "The third line,"
msgstr ""

#: ../../source/spec.rst:8598
msgid ""
"causes the ``paragraph`` block to be closed, and a new ``list`` block "
"opened as a child of the ``block_quote``. A ``list_item`` is also added "
"as a child of the ``list``, and a ``paragraph`` as a child of the "
"``list_item``. The text is then added to the new ``paragraph``:"
msgstr ""

#: ../../source/spec.rst:8614
msgid "The fourth line,"
msgstr ""

#: ../../source/spec.rst:8620
msgid ""
"causes the ``list_item`` (and its child the ``paragraph``) to be closed, "
"and a new ``list_item`` opened up as child of the ``list``. A "
"``paragraph`` is added as a child of the new ``list_item``, to contain "
"the text. We thus obtain the final tree:"
msgstr ""

#: ../../source/spec.rst:8640
msgid "Phase 2: inline structure"
msgstr ""

#: ../../source/spec.rst:8642
msgid "Once all of the input has been parsed, all open blocks are closed."
msgstr ""

#: ../../source/spec.rst:8644
msgid ""
"We then \"walk the tree,\" visiting every node, and parse raw string "
"contents of paragraphs and headings as inlines. At this point we have "
"seen all the link reference definitions, so we can resolve reference "
"links as we go."
msgstr ""

#: ../../source/spec.rst:8667
msgid ""
"Notice how the [line ending] in the first paragraph has been parsed as a "
"``softbreak``, and the asterisks in the first list item have become an "
"``emph``."
msgstr ""

#: ../../source/spec.rst:8672
msgid "An algorithm for parsing nested emphasis and links"
msgstr ""

#: ../../source/spec.rst:8674
msgid ""
"By far the trickiest part of inline parsing is handling emphasis, strong "
"emphasis, links, and images. This is done using the following algorithm."
msgstr ""

#: ../../source/spec.rst:8677
msgid "When we're parsing inlines and we hit either"
msgstr ""

#: ../../source/spec.rst:8679
msgid "a run of ``*`` or ``_`` characters, or"
msgstr ""

#: ../../source/spec.rst:8680
msgid "a ``[`` or ``![``"
msgstr ""

#: ../../source/spec.rst:8682
msgid ""
"we insert a text node with these symbols as its literal content, and we "
"add a pointer to this text node to the `delimiter stack <@>`__."
msgstr ""

#: ../../source/spec.rst:8685
msgid ""
"The [delimiter stack] is a doubly linked list. Each element contains a "
"pointer to a text node, plus information about"
msgstr ""

#: ../../source/spec.rst:8688
msgid "the type of delimiter (``[``, ``![``, ``*``, ``_``)"
msgstr ""

#: ../../source/spec.rst:8689
msgid "the number of delimiters,"
msgstr ""

#: ../../source/spec.rst:8690
msgid "whether the delimiter is \"active\" (all are active to start), and"
msgstr ""

#: ../../source/spec.rst:8691
msgid ""
"whether the delimiter is a potential opener, a potential closer, or both "
"(which depends on what sort of characters precede and follow the "
"delimiters)."
msgstr ""

#: ../../source/spec.rst:8695
msgid ""
"When we hit a ``]`` character, we call the *look for link or image* "
"procedure (see below)."
msgstr ""

#: ../../source/spec.rst:8698
msgid ""
"When we hit the end of the input, we call the *process emphasis* "
"procedure (see below), with ``stack_bottom`` = NULL."
msgstr ""

#: ../../source/spec.rst:8702
msgid "*look for link or image*"
msgstr ""

#: ../../source/spec.rst:8704
msgid ""
"Starting at the top of the delimiter stack, we look backwards through the"
" stack for an opening ``[`` or ``![`` delimiter."
msgstr ""

#: ../../source/spec.rst:8707
msgid "If we don't find one, we return a literal text node ``]``."
msgstr ""

#: ../../source/spec.rst:8709
msgid ""
"If we do find one, but it's not *active*, we remove the inactive "
"delimiter from the stack, and return a literal text node ``]``."
msgstr ""

#: ../../source/spec.rst:8712
msgid ""
"If we find one and it's active, then we parse ahead to see if we have an "
"inline link/image, reference link/image, compact reference link/image, or"
" shortcut reference link/image."
msgstr ""

#: ../../source/spec.rst:8716
msgid ""
"If we don't, then we remove the opening delimiter from the delimiter "
"stack and return a literal text node ``]``."
msgstr ""

#: ../../source/spec.rst:8719
msgid "If we do, then"
msgstr ""

#: ../../source/spec.rst:8721
msgid ""
"We return a link or image node whose children are the inlines after the "
"text node pointed to by the opening delimiter."
msgstr ""

#: ../../source/spec.rst:8724
msgid ""
"We run *process emphasis* on these inlines, with the ``[`` opener as "
"``stack_bottom``."
msgstr ""

#: ../../source/spec.rst:8727
msgid "We remove the opening delimiter."
msgstr ""

#: ../../source/spec.rst:8729
msgid ""
"If we have a link (and not an image), we also set all ``[`` delimiters "
"before the opening delimiter to *inactive*. (This will prevent us from "
"getting links within links.)"
msgstr ""

#: ../../source/spec.rst:8734
msgid "*process emphasis*"
msgstr ""

#: ../../source/spec.rst:8736
msgid ""
"Parameter ``stack_bottom`` sets a lower bound to how far we descend in "
"the [delimiter stack]. If it is NULL, we can go all the way to the "
"bottom. Otherwise, we stop before visiting ``stack_bottom``."
msgstr ""

#: ../../source/spec.rst:8740
msgid ""
"Let ``current_position`` point to the element on the [delimiter stack] "
"just above ``stack_bottom`` (or the first element if ``stack_bottom`` is "
"NULL)."
msgstr ""

#: ../../source/spec.rst:8744
msgid ""
"We keep track of the ``openers_bottom`` for each delimiter type (``*``, "
"``_``). Initialize this to ``stack_bottom``."
msgstr ""

#: ../../source/spec.rst:8747
msgid "Then we repeat the following until we run out of potential closers:"
msgstr ""

#: ../../source/spec.rst:8749
msgid ""
"Move ``current_position`` forward in the delimiter stack (if needed) "
"until we find the first potential closer with delimiter ``*`` or ``_``. "
"(This will be the potential closer closest to the beginning of the input "
"-- the first one in parse order.)"
msgstr ""

#: ../../source/spec.rst:8754
msgid ""
"Now, look back in the stack (staying above ``stack_bottom`` and the "
"``openers_bottom`` for this delimiter type) for the first matching "
"potential opener (\"matching\" means same delimiter)."
msgstr ""

#: ../../source/spec.rst:8758
msgid "If one is found:"
msgstr ""

#: ../../source/spec.rst:8760
msgid ""
"Figure out whether we have emphasis or strong emphasis: if both closer "
"and opener spans have length >= 2, we have strong, otherwise regular."
msgstr ""

#: ../../source/spec.rst:8764
msgid ""
"Insert an emph or strong emph node accordingly, after the text node "
"corresponding to the opener."
msgstr ""

#: ../../source/spec.rst:8767
msgid ""
"Remove any delimiters between the opener and closer from the delimiter "
"stack."
msgstr ""

#: ../../source/spec.rst:8770
msgid ""
"Remove 1 (for regular emph) or 2 (for strong emph) delimiters from the "
"opening and closing text nodes. If they become empty as a result, remove "
"them and remove the corresponding element of the delimiter stack. If the "
"closing node is removed, reset ``current_position`` to the next element "
"in the stack."
msgstr ""

#: ../../source/spec.rst:8776
msgid "If none in found:"
msgstr ""

#: ../../source/spec.rst:8778
msgid ""
"Set ``openers_bottom`` to the element before ``current_position``. (We "
"know that there are no openers for this kind of closer up to and "
"including this point, so this puts a lower bound on future searches.)"
msgstr ""

#: ../../source/spec.rst:8783
msgid ""
"If the closer at ``current_position`` is not a potential opener, remove "
"it from the delimiter stack (since we know it can't be a closer either)."
msgstr ""

#: ../../source/spec.rst:8787
msgid "Advance ``current_position`` to the next element in the stack."
msgstr ""

#: ../../source/spec.rst:8789
msgid ""
"After we're done, we remove all delimiters above ``stack_bottom`` from "
"the delimiter stack."
msgstr ""
